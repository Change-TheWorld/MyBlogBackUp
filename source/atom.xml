<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风满楼的博客</title>
  <subtitle>不要忘了你的梦想 | 机会有很多，然而，她只会青睐有实力的人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.erictxl.cn/"/>
  <updated>2017-06-23T14:39:33.682Z</updated>
  <id>http://www.erictxl.cn/</id>
  
  <author>
    <name>Aco</name>
    <email>2973978759@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>flex布局学习</title>
    <link href="http://www.erictxl.cn/2017/06/23/flex%E5%B8%83%E5%B1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.erictxl.cn/2017/06/23/flex布局学习/</id>
    <published>2017-06-23T14:39:33.000Z</published>
    <updated>2017-06-23T14:39:33.682Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AngularJS 学习记录</title>
    <link href="http://www.erictxl.cn/2017/06/20/AngularJS-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.erictxl.cn/2017/06/20/AngularJS-学习记录/</id>
    <published>2017-06-20T01:40:33.000Z</published>
    <updated>2017-06-23T16:46:17.248Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””</p>
</blockquote>
<hr>
<h1 id="AnjularJS-学习记录"><a href="#AnjularJS-学习记录" class="headerlink" title="AnjularJS 学习记录"></a>AnjularJS 学习记录</h1><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28949843&auto=0&height=66"></iframe>

<blockquote>
<p>AngularJS 通过新的属性和表达式扩展了 HTML。<br>AngularJS 可以构建一个单一页面应用程序（SPAs：Single Page Applications）。</p>
</blockquote>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ol>
<li>ng-app=” “  定义angularJS的使用范围；指令告诉 AngularJS，<code>&lt;div&gt;</code> 元素是 AngularJS 应用程序 的 <strong>“所有者”</strong>。一个网页可以包含多个运行在不同元素中的 AngularJS 应用程序。</li>
<li>ng-init=”变量=值;变量=’值’”  初始化变量的值，有多个变量时，中间用分号隔开；</li>
<li>ng-model=”变量”  定义变量名；</li>
<li>ng-bind=”变量”  绑定变量名，获取该变量的数据。这里的变量就是第3条的变量名。但是一般都用双重花括号来获取变量的值，比如：。</li>
<li>AngularJS 表达式写在双大括号内：。AngularJS 表达式 很像 JavaScript 表达式：它们可以包含文字、运算符和变量。</li>
</ol>
<a id="more"></a>
<blockquote>
<p>AngularJS 是一个 JavaScript 框架。它可通过 <code>&lt;script&gt;</code> 标签添加到 HTML 页面。<br>AngularJS 通过 <strong><code>指令</code></strong> 扩展了 HTML，且通过 <strong><code>表达式</code></strong> 绑定数据到 HTML。</p>
</blockquote>
<p>AngularJS 使得开发现代的单一页面应用程序（SPAs：Single Page Applications）变得更加容易。</p>
<ol>
<li>AngularJS 把应用程序数据绑定到 HTML 元素。</li>
<li>AngularJS 可以克隆和重复 HTML 元素。</li>
<li>AngularJS 可以隐藏和显示 HTML 元素。</li>
<li>AngularJS 可以在 HTML 元素”背后”添加代码。</li>
<li>AngularJS 支持输入验证。</li>
</ol>
<h2 id="AngularJS-应用"><a href="#AngularJS-应用" class="headerlink" title="AngularJS 应用"></a>AngularJS 应用</h2><ol>
<li>AngularJS 模块（Module） 定义了 AngularJS 应用。</li>
<li>AngularJS 控制器（Controller） 用于控制 AngularJS 应用。</li>
<li><code>ng-app</code>指令定义了应用, <code>ng-controller</code> 定义了控制器。</li>
</ol>
<blockquote>
<p>提示：使用 <code>ng-init</code> 不是很常见</p>
</blockquote>
<h3 id="AngularJS-表达式-与-JavaScript-表达式"><a href="#AngularJS-表达式-与-JavaScript-表达式" class="headerlink" title="AngularJS 表达式 与 JavaScript 表达式"></a>AngularJS 表达式 与 JavaScript 表达式</h3><p>类似于 JavaScript 表达式，AngularJS 表达式可以包含字母，操作符，变量。</p>
<ol>
<li>与 JavaScript 表达式不同，AngularJS 表达式可以写在 HTML 中。</li>
<li>与 JavaScript 表达式不同，AngularJS 表达式不支持条件判断，循环及异常。</li>
<li>与 JavaScript 表达式不同，AngularJS 表达式支持过滤器。</li>
</ol>
<blockquote>
<p>AngularJS 完美支持数据库的 CRUD（<strong>增加 Create 、读取 Read 、更新 Update、删除 Delete </strong>）应用程序。<strong>把实例中的对象想象成数据库中的记录。</strong></p>
</blockquote>
<h3 id="ng-model-指令"><a href="#ng-model-指令" class="headerlink" title="ng-model 指令"></a>ng-model 指令</h3><p>ng-model 指令 绑定 HTML 元素 到应用程序数据。</p>
<p>ng-model 指令也可以：</p>
<ol>
<li>为应用程序数据提供类型验证（number、email、required）。</li>
<li>为应用程序数据提供状态（invalid、dirty、touched、error）。</li>
<li>为 HTML 元素提供 CSS 类。</li>
<li>绑定 HTML 元素到 HTML 表单。</li>
</ol>
<p>注意： </p>
<pre><code>1. ng-model 是用于表单元素的，支持 **双向绑定** 。对普通元素无效；
2. ng-bind 用于普通元素，不能用于表单元素，应用程序单向地渲染数据到元素；
3. 当 ng-bind 和 `{{ }}` 同时使用时，ng-bind 绑定的值覆盖该元素的内容。
4. 验证用户输入, 提示信息会在 ng-show 属性返回 true 的情况下显示。
5. 应用状态
</code></pre><p>ng-model 指令可以为应用数据提供状态值(invalid, dirty, touched, error):</p>
<pre><code>$valid: true (如果输入的值是合法的则为 true)。
$invalid: true (如果输入的值是合法的则为 true)。
$pristine:     表单没有填写记录
$dirty: false (如果值改变则为 true)。myForm.user.$dirty
$touched: true (如果通过触屏点击则为 true)。
$error: js对象，有如下几个值，使用方法：`&lt;span ng-show=&quot;myForm.email.$error.email&quot;&gt;非法的邮箱。&lt;/span&gt;`
    email
    max
    maxlength
    min
    minlength
    number
    pattern
    required
    url
</code></pre><p>ng-model 指令根据表单域的状态添加/移除以下类：</p>
<pre><code>ng-empty
ng-not-empty
ng-touched
ng-untouched
ng-valid
ng-invalid
ng-dirty
ng-pending
ng-pristine
</code></pre><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 自定义指令</span></div><div class="line">app.directive(<span class="string">"aco"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">template</span>: <span class="string">"&lt;h1&gt;Hello ,我是Aco~&lt;/h1&gt;"</span></div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>加 restrict 值 以来打到不同的要求<br>restrict 值可以是以下几种:</p>
<pre><code>E 作为元素名使用
A 作为属性使用
C 作为类名使用 
M 作为注释使用(注意加上`replace : true,`)
</code></pre><p>restrict 默认值为 EA, 即可以通过元素名和属性名来调用指令。</p>
<h3 id="AngularJS-Scope-作用域-模型层"><a href="#AngularJS-Scope-作用域-模型层" class="headerlink" title="AngularJS Scope(作用域)(模型层)"></a>AngularJS Scope(作用域)(模型层)</h3><p>当在控制器中添加 $scope 对象时，视图 (HTML) 可以获取了这些属性。<br>视图中，你不需要添加 $scope 前缀, 只需要添加属性名即可，如： 。</p>
<h4 id="Scope-概述"><a href="#Scope-概述" class="headerlink" title="Scope 概述"></a>Scope 概述</h4><p>AngularJS 应用组成如下：</p>
<pre><code>View(视图), 即 HTML。
Model(模型), 当前视图中可用的数据。如果你修改了视图，模型和控制器也会相应更新
Controller(控制器), 即 JavaScript 函数，可以添加或修改属性。
</code></pre><p>scope 是模型。<br>scope 是一个 JavaScript 对象，带有属性和方法，这些属性和方法可以在视图和控制器中使用。</p>
<blockquote>
<p>根作用域</p>
</blockquote>
<p>所有的应用都有一个 <code>$rootScope</code>，它可以作用在 <code>ng-app</code> 指令包含的所有 HTML 元素中。<br><code>$rootScope 可作用于整个应用中</code>。是各个 <code>controller</code> 中 scope 的桥梁。用 rootscope 定义的值，可以在各个 controller 中使用。</p>
<p>创建控制器时，将 <code>$rootScope</code> 作为参数传递，可在应用中使用：</p>
<h3 id="AngularJS-控制器（控制层）"><a href="#AngularJS-控制器（控制层）" class="headerlink" title="AngularJS 控制器（控制层）"></a>AngularJS 控制器（控制层）</h3><p>ng-controller 指令定义了应用程序控制器。<br>控制器是 <strong>JavaScript 对象</strong>，由标准的 JavaScript <strong>对象的构造函数</strong> 创建。</p>
<p>控制器的 $scope （相当于作用域、控制范围）用来保存AngularJS Model(模型)的对象。<br>ng-model 指令绑定输入域到控制器的属性（firstName 和 lastName）。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, []);</div><div class="line">app.controller(<span class="string">'personCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">    $scope.firstName = <span class="string">"John"</span>;</div><div class="line">    $scope.lastName = <span class="string">"Doe"</span>;</div><div class="line">    $scope.fullName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> $scope.firstName + <span class="string">" "</span> + $scope.lastName;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="AngularJS-过滤器"><a href="#AngularJS-过滤器" class="headerlink" title="AngularJS 过滤器"></a>AngularJS 过滤器</h3><blockquote>
<p>过滤器可以使用一个管道字符（|）添加到表达式和指令中。</p>
</blockquote>
<p>AngularJS 过滤器可用于转换数据：</p>
<pre><code>过滤器                   描述
currency    格式化数字为货币格式。
filter          从数组项中选择一个子集。
lowercase    格式化字符串为小写。
orderBy          根据某个表达式排列数组。
uppercase    格式化字符串为大写。
</code></pre><h4 id="向指令添加过滤器"><a href="#向指令添加过滤器" class="headerlink" title="向指令添加过滤器"></a>向指令添加过滤器</h4><p>过滤器可以通过一个管道字符（|）和一个过滤器添加到指令中。<br>orderBy 过滤器根据表达式排列数组：</p>
<h4 id="过滤输入"><a href="#过滤输入" class="headerlink" title="过滤输入"></a>过滤输入</h4><p>输入过滤器可以通过一个管道字符（|）和一个过滤器添加到指令中，该过滤器后跟一个冒号和一个模型名称。<br>filter 过滤器从数组中选择一个子集：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"namesCtrl"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"x in names | filter:test | orderBy:'country'"</span>&gt;</span></div><div class="line">        &#123;&#123; (x.name | uppercase) + ', ' + x.country &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li><p>uppercase，lowercase 大小写转换</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; <span class="string">"lower cap string"</span> | uppercase &#125;&#125;   <span class="comment">// 结果：LOWER CAP STRING</span></div><div class="line">&#123;&#123; <span class="string">"TANK is GOOD"</span> | lowercase &#125;&#125;      <span class="comment">// 结果：tank is good</span></div></pre></td></tr></table></figure>
</li>
<li><p>date 格式化</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;<span class="number">1490161945000</span> | date:<span class="string">"yyyy-MM-dd HH:mm:ss"</span>&#125;&#125; <span class="comment">// 2017-03-22 13:52:25</span></div></pre></td></tr></table></figure>
</li>
<li><p>number 格式化（保留小数）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;<span class="number">149016.1945000</span> | number:<span class="number">2</span>&#125;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>currency 货币格式化</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; <span class="number">250</span> | currency &#125;&#125;            <span class="comment">// 结果：$250.00</span></div><div class="line">&#123;&#123; <span class="number">250</span> | currency:<span class="string">"RMB ￥ "</span> &#125;&#125;  <span class="comment">// 结果：RMB ￥ 250.00</span></div></pre></td></tr></table></figure>
</li>
<li><p>filter 查找<br>输入过滤器可以通过一个管道字符（|）和一个过滤器添加到指令中，该过滤器后跟一个冒号和一个模型名称。<br>filter 过滤器从数组中选择一个子集</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 查找name为iphone的行</span></div><div class="line">&#123;&#123; [&#123;<span class="string">"age"</span>: <span class="number">20</span>,<span class="string">"id"</span>: <span class="number">10</span>,<span class="string">"name"</span>: <span class="string">"iphone"</span>&#125;,</div><div class="line">    &#123;<span class="string">"age"</span>: <span class="number">12</span>,<span class="string">"id"</span>: <span class="number">11</span>,<span class="string">"name"</span>: <span class="string">"sunm xing"</span>&#125;,</div><div class="line">    &#123;<span class="string">"age"</span>: <span class="number">44</span>,<span class="string">"id"</span>: <span class="number">12</span>,<span class="string">"name"</span>: <span class="string">"test abc"</span>&#125;</div><div class="line">    ] | filter:&#123;<span class="string">'name'</span>:<span class="string">'iphone'</span>&#125; &#125;&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p>limitTo 截取</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;<span class="string">"1234567890"</span> | limitTo: <span class="number">6</span>&#125;&#125; <span class="comment">// 从前面开始截取6位</span></div><div class="line">&#123;&#123;<span class="string">"1234567890"</span> | limitTo: <span class="number">-4</span>&#125;&#125; <span class="comment">// 从后面开始截取4位</span></div></pre></td></tr></table></figure>
</li>
<li><p>orderBy 排序 默认正序 asc ,倒序添加-负号</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">// 根id降序排</span></div><div class="line">&#123;&#123; [&#123;<span class="string">"age"</span>: <span class="number">20</span>,<span class="string">"id"</span>: <span class="number">10</span>,<span class="string">"name"</span>: <span class="string">"iphone"</span>&#125;,</div><div class="line">    &#123;<span class="string">"age"</span>: <span class="number">12</span>,<span class="string">"id"</span>: <span class="number">11</span>,<span class="string">"name"</span>: <span class="string">"sunm xing"</span>&#125;,</div><div class="line">    &#123;<span class="string">"age"</span>: <span class="number">44</span>,<span class="string">"id"</span>: <span class="number">12</span>,<span class="string">"name"</span>: <span class="string">"test abc"</span>&#125;</div><div class="line">    ] | orderBy:<span class="string">'-id'</span> &#125;&#125;</div><div class="line"></div><div class="line">    <span class="comment">// 根据id升序排</span></div><div class="line">&#123;&#123; [&#123;<span class="string">"age"</span>: <span class="number">20</span>,<span class="string">"id"</span>: <span class="number">10</span>,<span class="string">"name"</span>: <span class="string">"iphone"</span>&#125;,</div><div class="line">    &#123;<span class="string">"age"</span>: <span class="number">12</span>,<span class="string">"id"</span>: <span class="number">11</span>,<span class="string">"name"</span>: <span class="string">"sunm xing"</span>&#125;,</div><div class="line">    &#123;<span class="string">"age"</span>: <span class="number">44</span>,<span class="string">"id"</span>: <span class="number">12</span>,<span class="string">"name"</span>: <span class="string">"test abc"</span>&#125;</div><div class="line">    ] | orderBy:<span class="string">'id'</span> &#125;&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>8.自定义过滤器<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.filter(<span class="string">'reverse'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//可以注入依赖</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> text.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="AngularJS-服务-Service"><a href="#AngularJS-服务-Service" class="headerlink" title="AngularJS 服务(Service)"></a>AngularJS 服务(Service)</h3><ol>
<li><code>$location</code> 服务，它可以返回当前页面的 URL 地址。<code>$scope.myUrl = $location.absUrl();</code>,<strong><code>$location</code> 服务是作为一个参数传递到 controller 中。如果要使用它，需要在 controller 中定义。</strong></li>
</ol>
<p>为什么使用服务?<br></p>
<blockquote>
<p>在很多服务中，比如 <code>$location</code> 服务，它可以使用 DOM 中存在的对象，类似 <code>window.location</code> 对象，但 <code>window.location</code> 对象在 AngularJS 应用中有一定的局限性。<br>AngularJS 会一直监控应用，处理事件变化， AngularJS 使用 <code>$location</code> 服务比使用 <code>window.location</code> 对象更好。因为这些服务可以获取到 Angular 应用声明周期的每一个阶段，并且和<code>$watch</code> 整合，让 Angular 可以监控应用，处理事件变化。普通的DOM对象则不能在Angular应用声明周期中和应用整合。</p>
</blockquote>
<table>
<thead>
<tr>
<th>目录</th>
<th><code>window.location</code></th>
<th><code>$location.service</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>目的</td>
<td>允许对当前浏览器位置进行读写操作</td>
<td>允许对当前浏览器位置进行读写操作</td>
</tr>
<tr>
<td>API</td>
<td>暴露一个能被读写的对象</td>
<td>暴露jquery风格的读写器</td>
</tr>
<tr>
<td>是否在AngularJS应用生命周期中和应用整合</td>
<td>否</td>
<td>可获取到应用声明周期内的每一个阶段，并且和$watch整合</td>
</tr>
<tr>
<td>是否和HTML5 API的无缝整合</td>
<td>否</td>
<td>是（对低级浏览器优雅降级）</td>
</tr>
<tr>
<td>和应用的上下文是否相关</td>
<td>否，<code>window.location.path</code> 返回 “/docroot/actual/path”</td>
<td>是，<code>$location.path()</code> 返回 “/actual/path”</td>
</tr>
</tbody>
</table>
<ol>
<li><p><code>$http</code>服务(重点) : 是 AngularJS 中的一个核心服务，用于读取远程服务器的数据。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, []);</div><div class="line">        </div><div class="line">app.controller(<span class="string">'siteCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $http</span>) </span>&#123;</div><div class="line">    $http(&#123;</div><div class="line">        <span class="attr">method</span>: <span class="string">'GET'</span>,</div><div class="line">        <span class="attr">url</span>: <span class="string">'http://139.199.7.254:8080/AcoTest/person.php'</span></div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span> <span class="title">successCallback</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">            $scope.names = response.data.person;</div><div class="line">        &#125;, <span class="function"><span class="keyword">function</span> <span class="title">errorCallback</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">        <span class="comment">// 请求失败执行代码</span></div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>自定义服务</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, []);</div><div class="line">app.service(<span class="string">'hexafy'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.myFunc = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> x.toString(<span class="number">16</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.filter(<span class="string">'myFormat'</span>,[<span class="string">'hexafy'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">hexafy</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> hexafy.myFunc(x);</div><div class="line">    &#125;;</div><div class="line">&#125;]);</div><div class="line"></div><div class="line">app.controller(<span class="string">'myCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">    $scope.counts = [<span class="number">255</span>, <span class="number">251</span>, <span class="number">200</span>];</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="AngularJS-Select-选择框"><a href="#AngularJS-Select-选择框" class="headerlink" title="AngularJS Select(选择框)"></a>AngularJS Select(选择框)</h3><p>在 AngularJS 中我们可以使用 ng-option 指令来创建一个下拉列表，列表项通过对象和数组循环输出。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">ng-init</span>=<span class="string">"selectedName = names[0]"</span> <span class="attr">ng-model</span>=<span class="string">"selectedName"</span> <span class="attr">ng-options</span>=<span class="string">"x for x in names"</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--使用对象型的数据源--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">ng-model</span>=<span class="string">"selectedCar"</span> <span class="attr">ng-options</span>=<span class="string">"y.brand for (x,y) in cars"</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>也可以使用ng-repeat : </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">ng-repeat</span>=<span class="string">"x in names"</span>&gt;</span>&#123;&#123;x&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<p>但是，使用 ng-options 时选项是一个对象，而使用 ng-repeat 时选项是一个字符串，因此，使用 ng-options 更好，也会更灵活。</p>
<h3 id="AngularJS-表格"><a href="#AngularJS-表格" class="headerlink" title="AngularJS 表格"></a>AngularJS 表格</h3><p>ng-repeat 无敌</p>
<h3 id="AngularJS-SQL"><a href="#AngularJS-SQL" class="headerlink" title="AngularJS SQL"></a>AngularJS SQL</h3><blockquote>
<p>需要连接数据库，服务器，之后再测试</p>
</blockquote>
<h3 id="AngularJS-HTML-DOM"><a href="#AngularJS-HTML-DOM" class="headerlink" title="AngularJS HTML DOM"></a>AngularJS HTML DOM</h3><ol>
<li>ng-disabled 指令绑定应用程序数据 “mySwitch” 到 HTML 的 disabled 属性。</li>
<li><p>ng-show 指令隐藏或显示一个 HTML 元素。true 为显示，false 为隐藏。ng-show 指令也可以根据 value 的值来显示（隐藏）HTML 元素。eg:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">""</span> <span class="attr">ng-init</span>=<span class="string">"hour=13"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-show</span>=<span class="string">"hour &gt; 12"</span>&gt;</span>我是可见的。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>ng-hide 指令用于隐藏或显示 HTML 元素。true 为隐藏，false 为显示。反过来就行</p>
</li>
</ol>
<h3 id="AngularJS-事件"><a href="#AngularJS-事件" class="headerlink" title="AngularJS 事件"></a>AngularJS 事件</h3><ol>
<li>ng-click 指令: 定义了 AngularJS 点击事件。</li>
</ol>
<h3 id="AngularJS-模块"><a href="#AngularJS-模块" class="headerlink" title="AngularJS 模块"></a>AngularJS 模块</h3><ol>
<li><p>创建模块 <code>var app = angular.module(&quot;myApp&quot;, []);</code></p>
<blockquote>
<p>在模块定义中 [] 参数用于定义模块的依赖关系。中括号[]表示该模块没有依赖，如果有依赖的话会在中括号写上依赖的模块名字。</p>
</blockquote>
</li>
<li><p>添加控制器</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"myCtrl"</span>&gt;</span></div><div class="line">&#123;&#123; firstName + " " + lastName &#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">    <span class="keyword">var</span> app = angular.module(<span class="string">"myApp"</span>, []);</div><div class="line"></div><div class="line">    app.controller(<span class="string">"myCtrl"</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope)</span> </span>&#123;</div><div class="line">        $scope.firstName = <span class="string">"John"</span>;</div><div class="line">        $scope.lastName = <span class="string">"Doe"</span>;</div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>添加指令：可以使用内置的指令，也可以自己创建指令，上面有提到过</p>
</li>
<li>模块和控制器包含在 JS 文件中，eg :  “myApp.js” 包含了应用模块的定义程序， “myCtrl.js” 文件包含了控制器：</li>
<li>函数会影响到全局命名空间</li>
</ol>
<blockquote>
<p>JavaScript 中应避免使用全局函数。因为他们很容易被其他脚本文件覆盖。</p>
</blockquote>
<p>AngularJS 模块让所有函数的作用域在该模块下，避免了该问题。</p>
<p>6.对于 HTML 应用程序，通常建议把所有的脚本都放置在 <code>&lt;body&gt;</code> 元素的最底部。 在我们的实例中，AngularJS 在 <code>&lt;head&gt;</code> 元素中被加载，因为对 angular.module 的调用只能在库加载完成后才能进行。(不理解，我试过，放在页面底部也可以)</p>
<h3 id="AngularJS-表单"><a href="#AngularJS-表单" class="headerlink" title="AngularJS 表单"></a>AngularJS 表单</h3><p>见例子</p>
<ol>
<li>AngularJS 表单是输入控件的集合。</li>
<li>ng-switch, ng-switch-when 指令根据单选按钮的选择结果显示或隐藏 HTML 区域。</li>
</ol>
<h3 id="AngularJS-输入验证"><a href="#AngularJS-输入验证" class="headerlink" title="AngularJS 输入验证"></a>AngularJS 输入验证</h3><p>AngularJS 表单和控件可以提供验证功能，并对用户输入的非法数据进行警告。</p>
<blockquote>
<p>Note    客户端的验证不能确保用户输入数据的安全，所以服务端的数据验证也是必须的。</p>
</blockquote>
<h3 id="AngularJS-API"><a href="#AngularJS-API" class="headerlink" title="AngularJS API"></a>AngularJS API</h3><p>API 意为 Application Programming Interface（应用程序编程接口）。</p>
<p>AngularJS 全局 API<br>AngularJS 全局 API 用于执行常见任务的 JavaScript 函数集合，如：比较对象, 迭代对象, 转换对象<br>全局 API 函数使用 angular 对象进行访问。</p>
<pre><code>angular.lowercase()    转换字符串为小写
angular.uppercase()    转换字符串为大写
angular.isString()    判断给定的对象是否为字符串，如果是返回 true。
angular.isNumber()    判断给定的对象是否为数字，如果是返回 true。
</code></pre><h3 id="AngularJS-包含"><a href="#AngularJS-包含" class="headerlink" title="AngularJS 包含"></a>AngularJS 包含</h3><p>在 AngularJS 中，你可以在 HTML 中包含 HTML 文件。<code>&lt;div ng-include=&quot;&#39;runoob.htm&#39;&quot;&gt;&lt;/div&gt;</code></p>
<h4 id="跨域包含"><a href="#跨域包含" class="headerlink" title="跨域包含"></a>跨域包含</h4><p>默认情况下， ng-include 指令不允许包含其他域名的文件。如果你需要包含其他域名的文件，你需要设置域名访问白名单：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-include</span>=<span class="string">"'http://c.runoob.com/runoobtest/angular_include.php'"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, [])</div><div class="line">app.config(<span class="function"><span class="keyword">function</span><span class="params">($sceDelegateProvider)</span> </span>&#123;</div><div class="line">    $sceDelegateProvider.resourceUrlWhitelist([</div><div class="line">        <span class="string">'http://c.runoob.com/runoobtest/**'</span></div><div class="line">    ]);</div><div class="line">&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>此外，还需要设置服务端允许跨域访问，<code>Access-Control-Allow-Origin: *</code> 设置方法可参考：<a href="http://www.runoob.com/w3cnote/php-ajax-cross-border.html" target="_blank" rel="external">PHP Ajax 跨域问题最佳解决方案。</a></p>
<h3 id="AngularJS-动画"><a href="#AngularJS-动画" class="headerlink" title="AngularJS 动画"></a>AngularJS 动画</h3><p>AngularJS 提供了动画效果，可以配合 CSS 使用。AngularJS 使用动画需要引入 angular-animate.min.js 库。<br><code>&lt;script src=&quot;http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular-animate.min.js&quot;&gt;&lt;/script&gt;</code><br>还需在应用中使用模型 ngAnimate：(如果应用已经设置了应用名，可以把 ngAnimate 直接添加在模型中：)<br><code>&lt;body ng-app=&quot;ngAnimate&quot;&gt;</code><br><code>var app = angular.module(&#39;myApp&#39;, [&#39;ngAnimate&#39;]);</code></p>
<blockquote>
<p>应用中动画不宜太多，但合适的使用动画可以增加页面的丰富性，也可以更易让用户理解。</p>
</blockquote>
<p>ngAnimate 模型可以添加或移除 class 。<br>ngAnimate 模型并不能使 HTML 元素产生动画，但是 ngAnimate 会监测事件，类似隐藏显示 HTML 元素 ，如果事件发生 ngAnimate 就会使用预定义的 class 来设置 HTML 元素的动画。<br>AngularJS 添加/移除 class 的指令:</p>
<pre><code>ng-show
ng-hide
ng-class
ng-view
ng-include
ng-repeat
ng-if
ng-switch
</code></pre><p>ng-show 和 ng-hide 指令用于添加或移除 ng-hide class 的值。<br>其他指令会在进入 DOM 会添加 ng-enter 类，移除 DOM 会添加 ng-leave 属性。<br>当 HTML 元素位置改变时，ng-repeat 指令同样可以添加 ng-move 类 。<br>此外， 在动画完成后，HTML 元素的类集合将被移除。例如： ng-hide 指令会添加一下类：</p>
<pre><code>ng-animate
ng-hide-animate
ng-hide-add (如果元素将被隐藏)
ng-hide-remove (如果元素将显示)
ng-hide-add-active (如果元素将隐藏)
ng-hide-remove-active (如果元素将显示)
</code></pre><h3 id="AngularJS-依赖注入"><a href="#AngularJS-依赖注入" class="headerlink" title="AngularJS 依赖注入"></a>AngularJS 依赖注入</h3><p>wiki 上的解释是：</p>
<blockquote>
<p>依赖注入（Dependency Injection，简称DI）是一种软件设计模式，在这种模式下，一个或更多的依赖（或服务）被注入（或者通过引用传递）到一个独立的对象（或客户端）中，然后成为了该客户端状态的一部分。</p>
</blockquote>
<p>该模式分离了客户端依赖本身行为的创建，这使得程序设计变得松耦合，并遵循了依赖反转和单一职责原则。与服务定位器模式形成直接对比的是，它允许客户端了解客户端如何使用该系统找到依赖</p>
<blockquote>
<p>一句话 — 没事你不要来找我，有事我会去找你。</p>
</blockquote>
<p>AngularJS 提供很好的依赖注入机制。以下5个核心组件用来作为依赖注入：</p>
<ol>
<li>value</li>
<li>factory</li>
<li>service</li>
<li>provider</li>
<li>constant</li>
</ol>
<h4 id="value"><a href="#value" class="headerlink" title="value"></a>value</h4><p>Value 是一个简单的 javascript 对象，用于向控制器传递值（配置阶段）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建 value 对象 "defaultInput" 并传递数据</span></div><div class="line">mainApp.value(<span class="string">"defaultInput"</span>, <span class="number">5</span>);</div></pre></td></tr></table></figure></p>
<h4 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h4><p>factory 是一个函数用于返回值。在 service 和 controller 需要时创建。<br>通常我们使用 factory 函数来计算或返回值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建 factory "MathService" 用于两数的乘积 provides a method multiply to return multiplication of two numbers</span></div><div class="line">mainApp.factory(<span class="string">'MathService'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> factory = &#123;&#125;;</div><div class="line">   </div><div class="line">   factory.multiply = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> a * b</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> factory;</div><div class="line">&#125;); </div><div class="line"></div><div class="line"><span class="comment">// 在 service 中注入 factory "MathService"</span></div><div class="line">mainApp.service(<span class="string">'CalcService'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">MathService</span>)</span>&#123;</div><div class="line">   <span class="keyword">this</span>.square = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> MathService.multiply(a,a);</div><div class="line">   &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="provider"><a href="#provider" class="headerlink" title="provider"></a>provider</h4><p>AngularJS 中通过 provider 创建一个 service、factory等(配置阶段)。<br>Provider 中提供了一个 factory 方法 get()，它用于返回 value/service/factory。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用 provider 创建 service 定义一个方法用于计算两数乘积</span></div><div class="line">mainApp.config(<span class="function"><span class="keyword">function</span>(<span class="params">$provide</span>) </span>&#123;</div><div class="line">   $provide.provider(<span class="string">'MathService'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.$get = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="keyword">var</span> factory = &#123;&#125;;  </div><div class="line">         </div><div class="line">         factory.multiply = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> a * b; </div><div class="line">         &#125;</div><div class="line">         <span class="keyword">return</span> factory;</div><div class="line">      &#125;;</div><div class="line">   &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">mainApp.service(<span class="string">'CalcService'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">MathService</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.square = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> MathService.multiply(a,a);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">         </div><div class="line">mainApp.controller(<span class="string">'CalcController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, CalcService, defaultInput</span>) </span>&#123;</div><div class="line">    $scope.number = defaultInput;</div><div class="line">    $scope.result = CalcService.square($scope.number);</div><div class="line"></div><div class="line">    $scope.square = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        $scope.result = CalcService.square($scope.number);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="constant"><a href="#constant" class="headerlink" title="constant"></a>constant</h4><p>constant(常量)用来在配置阶段传递数值，注意这个常量在配置阶段是不可用的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mainApp.constant(<span class="string">"configParam"</span>, <span class="string">"constant value"</span>);</div></pre></td></tr></table></figure></p>
<ol>
<li>一个对别人有依赖的东西，它想要单独测试，就需要在依赖项齐备的情况下进行。如果我们在运行时注入，就可以减少这种依赖</li>
<li>参数由定义方决定</li>
<li>与import还不完全一样</li>
</ol>
<h3 id="AngularJS-路由"><a href="#AngularJS-路由" class="headerlink" title="AngularJS 路由"></a>AngularJS 路由</h3><p>AngularJS 路由允许我们通过不同的 URL 访问不同的内容。<br>通过 AngularJS 可以实现多视图的单页Web应用（single page web application，SPA）。<br>通常我们的URL形式为 <code>http://runoob.com/first/page</code>，但在单页Web应用中 AngularJS 通过 <strong># +</strong> 标记 实现，例如：</p>
<pre><code>http://runoob.com/#/first
http://runoob.com/#/second
http://runoob.com/#/third
</code></pre><blockquote>
<p>需要载入 <code>&lt;script src=&quot;http://apps.bdimg.com/libs/angular-route/1.3.13/angular-route.js&quot;&gt;&lt;/script&gt;</code></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;AnjularJS-学习记录&quot;&gt;&lt;a href=&quot;#AnjularJS-学习记录&quot; class=&quot;headerlink&quot; title=&quot;AnjularJS 学习记录&quot;&gt;&lt;/a&gt;AnjularJS 学习记录&lt;/h1&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=28949843&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
&lt;p&gt;AngularJS 通过新的属性和表达式扩展了 HTML。&lt;br&gt;AngularJS 可以构建一个单一页面应用程序（SPAs：Single Page Applications）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;ng-app=” “  定义angularJS的使用范围；指令告诉 AngularJS，&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 元素是 AngularJS 应用程序 的 &lt;strong&gt;“所有者”&lt;/strong&gt;。一个网页可以包含多个运行在不同元素中的 AngularJS 应用程序。&lt;/li&gt;
&lt;li&gt;ng-init=”变量=值;变量=’值’”  初始化变量的值，有多个变量时，中间用分号隔开；&lt;/li&gt;
&lt;li&gt;ng-model=”变量”  定义变量名；&lt;/li&gt;
&lt;li&gt;ng-bind=”变量”  绑定变量名，获取该变量的数据。这里的变量就是第3条的变量名。但是一般都用双重花括号来获取变量的值，比如：。&lt;/li&gt;
&lt;li&gt;AngularJS 表达式写在双大括号内：。AngularJS 表达式 很像 JavaScript 表达式：它们可以包含文字、运算符和变量。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="front" scheme="http://www.erictxl.cn/categories/front/"/>
    
    
      <category term="前端框架" scheme="http://www.erictxl.cn/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="AngularJS" scheme="http://www.erictxl.cn/tags/AngularJS/"/>
    
      <category term="学习记录" scheme="http://www.erictxl.cn/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>React 学习笔记&lt;一&gt;</title>
    <link href="http://www.erictxl.cn/2017/06/07/React-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>http://www.erictxl.cn/2017/06/07/React-学习笔记-一/</id>
    <published>2017-06-07T12:24:52.000Z</published>
    <updated>2017-06-20T02:54:33.313Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””</p>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;

    
    </summary>
    
      <category term="front" scheme="http://www.erictxl.cn/categories/front/"/>
    
    
      <category term="前端框架" scheme="http://www.erictxl.cn/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="学习记录" scheme="http://www.erictxl.cn/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="React" scheme="http://www.erictxl.cn/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Js复习</title>
    <link href="http://www.erictxl.cn/2017/06/07/Js%E5%A4%8D%E4%B9%A0/"/>
    <id>http://www.erictxl.cn/2017/06/07/Js复习/</id>
    <published>2017-06-07T12:23:07.000Z</published>
    <updated>2017-06-20T02:51:38.196Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””</p>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Css基础回顾</title>
    <link href="http://www.erictxl.cn/2017/06/07/Css%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/"/>
    <id>http://www.erictxl.cn/2017/06/07/Css基础回顾/</id>
    <published>2017-06-07T12:22:31.000Z</published>
    <updated>2017-06-20T07:30:22.520Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””</p>
</blockquote>
<hr>
<h1 id="CSS学习记录"><a href="#CSS学习记录" class="headerlink" title="CSS学习记录"></a>CSS学习记录</h1><h3 id="1-什么是-CSS"><a href="#1-什么是-CSS" class="headerlink" title="1. 什么是 CSS?"></a>1. 什么是 CSS?</h3><pre><code>CSS 指层叠样式表 (Cascading Style Sheets)
样式定义`如何显示` HTML 元素
样式通常存储在`样式表`中
把样式添加到 HTML 4.0 中，是为了`解决内容与表现分离的问题`
`外部样式表`可以极大提高工作效率
外部样式表通常存储在 `CSS 文件`中
多个样式定义可`层叠为一`
</code></pre><h3 id="2-不要在属性值与单位之间留有空格"><a href="#2-不要在属性值与单位之间留有空格" class="headerlink" title="2.  不要在属性值与单位之间留有空格"></a>2.  不要在属性值与单位之间留有空格</h3><blockquote>
<p>（如：<code>margin-left: 20 px</code> ），正确的写法是 <code>margin-left: 20px</code> 。</p>
</blockquote>
<a id="more"></a>
<h3 id="3-多重样式将层叠为一个"><a href="#3-多重样式将层叠为一个" class="headerlink" title="3. 多重样式将层叠为一个"></a>3. 多重样式将层叠为一个</h3><p>样式表允许以多种方式规定样式信息。样式可以规定在单个的 HTML 元素中，在 HTML 页的头元素中，或在一个外部的 CSS 文件中。甚至可以在同一个 HTML 文档内部引用多个外部样式表。<br>层叠次序<br>当同一个 HTML 元素被不止一个样式定义时，会使用哪个样式呢？<br>一般而言，所有的样式会根据下面的规则层叠于一个新的虚拟样式表中，其中数字 4 拥有最高的优先权。</p>
<pre><code>1 浏览器缺省设置
2 外部样式表
3 内部样式表（位于 `&lt;head&gt;` 标签内部）
4 内联样式（在 HTML 元素内部）
</code></pre><blockquote>
<p>因此，内联样式（在 HTML 元素内部）拥有最高的优先权，这意味着它将优先于以下的样式声明： 标签中的样式声明，外部样式表中的样式声明，或者浏览器中的样式声明（缺省值）。<br>Remark提示:如果你使用的外部文件样式在 <code>&lt;head&gt;</code>中也定义了该样式，则内部样式表会取代外部文件的样式。</p>
</blockquote>
<h3 id="4-CSS-背景属性用于定义HTML元素的背景"><a href="#4-CSS-背景属性用于定义HTML元素的背景" class="headerlink" title="4. CSS 背景属性用于定义HTML元素的背景"></a>4. CSS 背景属性用于定义HTML元素的背景</h3><p>CSS 属性定义背景效果:</p>
<pre><code>background-color
background-image： 可以加载多幅图片，属性设置用逗号隔开
    #example1 {
    background-image: url(img_flwr.gif), url(paper.gif);
    background-position: right bottom, left top;
    background-repeat: no-repeat, repeat;
    padding: 15px;
}
background-repeat： 
    repeat    背景图像将向垂直和水平方向重复。这是默认
    repeat-x    只有水平位置会重复背景图像
    repeat-y    只有垂直位置会重复背景图像
    no-repeat    background-image不会重复
    inherit    指定background-repeat属性设置应该从父元素继承
background-attachment： 
    scroll    背景图片随页面的其余部分滚动。这是默认
    fixed    背景图像是固定的
    inherit    指定background-attachment的设置应该从父元素继承
background-position: 取值如下，如果仅指定一个关键字，其他值将会是&quot;center&quot;
    left top
    left center
    left bottom
    right top
    right center
    right bottom
    center top
    center center
    center bottom
    x% y%    第一个值是水平位置，第二个值是垂直。左上角是0％0％。右下角是100％100％。如果仅指定了一个值，其他值将是50％。 。默认值为：0％0％
    xpos ypos    第一个值是水平位置，第二个值是垂直。左上角是0。单位可以是像素（0px0px）或任何其他 CSS单位。如果仅指定了一个值，其他值将是50％。你可以混合使用％和positions
    inherit    指定background-position属性设置应该从父元素继承
</code></pre><p>简写的顺序也是如此, eg : <code>body {background:#ffffff url(&#39;img_tree.png&#39;) no-repeat right top;}</code>   以上属性无需全部使用</p>
<h3 id="5-大多数浏览器的默认行高约为110-至120"><a href="#5-大多数浏览器的默认行高约为110-至120" class="headerlink" title="5. 大多数浏览器的默认行高约为110%至120%"></a>5. 大多数浏览器的默认行高约为110%至120%</h3><h3 id="6-vertical-align属性设置一个元素的垂直对齐"><a href="#6-vertical-align属性设置一个元素的垂直对齐" class="headerlink" title="6. vertical-align属性设置一个元素的垂直对齐"></a>6. vertical-align属性设置一个元素的垂直对齐</h3><pre><code>baseline    默认。元素放置在父元素的基线上。
sub    垂直对齐文本的下标。
super    垂直对齐文本的上标
top    把元素的顶端与行中最高元素的顶端对齐
text-top    把元素的顶端与父元素字体的顶端对齐
middle    把此元素放置在父元素的中部。
bottom    把元素的顶端与行中最低的元素的顶端对齐。
text-bottom    把元素的底端与父元素字体的底端对齐。
length     
%    使用 &quot;line-height&quot; 属性的百分比值来排列此元素。允许使用负值。
inherit    规定应该从父元素继承 vertical-align 属性的值。
</code></pre><h3 id="7-在计算机屏幕上，sans-serif字体被认为是比serif字体容易阅读"><a href="#7-在计算机屏幕上，sans-serif字体被认为是比serif字体容易阅读" class="headerlink" title="7. 在计算机屏幕上，sans-serif字体被认为是比serif字体容易阅读"></a>7. 在计算机屏幕上，sans-serif字体被认为是比serif字体容易阅读</h3><p>在CSS中，有两种类型的字体系列名称：<br>通用字体系列 - 拥有相似外观的字体系统组合（如 “Serif” 或 “Monospace”）<br>特定字体系列 - 一个特定的字体系列（如 “Times” 或 “Courier”）</p>
<h3 id="8-font-family-属性设置文本的字体系列"><a href="#8-font-family-属性设置文本的字体系列" class="headerlink" title="8. font-family 属性设置文本的字体系列"></a>8. font-family 属性设置文本的字体系列</h3><p>font-family 属性应该设置几个字体名称作为一种”后备”机制，如果浏览器不支持第一种字体，他将尝试下一种字体。<br>注意: 如果字体系列的名称超过一个字，它必须用引号，如Font Family：”宋体”。<br>多个字体系列是用一个逗号分隔指明：</p>
<h3 id="9-请务必使用正确的HTML标签"><a href="#9-请务必使用正确的HTML标签" class="headerlink" title="9. 请务必使用正确的HTML标签"></a>9. 请务必使用正确的HTML标签</h3><blockquote>
<p>eg：<code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code>表示标题和<code>&lt;p&gt;</code>表示段落：<br>字体大小的值可以是绝对或相对的大小。</p>
</blockquote>
<pre><code>绝对大小：
    设置一个指定大小的文本
    不允许用户在所有浏览器中改变文本大小
    确定了输出的物理尺寸时绝对大小很有用
相对大小：
    相对于周围的元素来设置大小
    允许用户在浏览器中改变文字大小
</code></pre><p>Remark: 如果你不指定一个字体的大小，默认大小和普通文本段落一样，是16像素（16px=1em）。</p>
<h3 id="10-用em来设置字体大小"><a href="#10-用em来设置字体大小" class="headerlink" title="10. 用em来设置字体大小"></a>10. 用em来设置字体大小</h3><p>为了避免Internet Explorer 中无法调整文本的问题，许多开发者使用 em 单位代替像素。<br>em的尺寸单位由W3C建议。</p>
<blockquote>
<p>1em和当前字体大小相等。在浏览器中默认的文字大小是16px。</p>
</blockquote>
<p>因此，1em的默认大小是16px。可以通过下面这个公式将像素转换为em：px/16=em</p>
<pre><code>body {font-size:100%;}
h1 {font-size:2.5em;}
h2 {font-size:1.875em;}
p {font-size:0.875em;}
</code></pre><h3 id="11-font-weight-设置文本的粗细"><a href="#11-font-weight-设置文本的粗细" class="headerlink" title="11. font-weight 设置文本的粗细"></a>11. font-weight 设置文本的粗细</h3><pre><code>normal    默认值。定义标准的字符。
bold    定义粗体字符。
bolder    定义更粗的字符。
lighter    定义更细的字符。
100
200
300
400 == normal
500
600
700 == bold
800
900
    定义由粗到细的字符。400 等同于 normal，而 700 等同于 bold。
inherit    规定应该从父元素继承字体的粗细。
</code></pre><h3 id="12-CSS盒子模型"><a href="#12-CSS盒子模型" class="headerlink" title="12. CSS盒子模型"></a>12. CSS盒子模型</h3><pre><code>Margin(外边距) - 清除边框外的区域，外边距是透明的。
Border(边框) - 围绕在内边距和内容外的边框。
Padding(内边距) - 清除内容周围的区域，内边距是透明的。
Content(内容) - 盒子的内容，显示文本和图像。
</code></pre><font color="orange">  当你指定一个CSS元素的宽度和高度属性时，你只是设置内容区域的宽度和高度。要知道，完全大小的元素，你还必须添加填充，边框和边距。</font>

<pre><code>最终元素的总宽度计算公式是这样的：
    总元素的宽度=宽度+左填充+右填充+左边框+右边框+左边距+右边距
元素的总高度最终计算公式是这样的：
    总元素的高度=高度+顶部填充+底部填充+上边框+下边框+上边距+下边距
</code></pre><h3 id="13-盒子模型"><a href="#13-盒子模型" class="headerlink" title="13. 盒子模型"></a>13. 盒子模型</h3><p>标准 W3C 盒子模型不同的是：IE 盒子模型的 content 部分包含了 border 和 pading。</p>
<pre><code>网页中的盒子模型；我们常常要控制盒子模型的宽度width:   
w3c中的盒子模型的宽:包括margin+border+padding+width;
    width:margin*2+border*2+padding*2+width;
    height:margin*2+border*2+padding*2+height;
iE中的盒子模型的width:也包括margin+border+padding+width;
上面的两个宽度相加的属性是一样的。不过在ie中content的宽度包括padding和border这两个属性；
例如一个盒子模型如下：margin:20px,border:10px,padding:10px;width:200px;height:50px;
如果用w3c盒子模型解释，那么这个盒子模型占用的
宽度为：20*2+10*2+10*2+200=280px; 
高度：20*2+10*2+10*2+50=130px;
盒子的实际宽度大小为:10*2+10*2+200=240px;
实际高度：10*2+10*2+50=90px;
用ie的盒子模型解释 ：盒子在网页中占据的大小为20*2+200=240px; 高：20*2+50=90px;
盒子的实际大小为：宽度:200px, 高度:50px;
我们常常理解的盒子模型是w3c这样的盒子模型
</code></pre><h3 id="14-border-style"><a href="#14-border-style" class="headerlink" title="14. border-style"></a>14. border-style</h3><blockquote>
<p>属性可以有1-4个值：上 右 下 左；上 左右 下； 上下 左右 ；</p>
</blockquote>
<pre><code>border-style: dotted solid double dashed;
    上边框是 dotted
    右边框是 solid
    底边框是 double
    左边框是 dashed

border-style: dotted solid double;
    上边框是 dotted
    左、右边框是 solid
    底边框是 double

border-style: dotted solid;
    上、底边框是 dotted
    右、左边框是 solid

border-style: dotted;
    四面边框是 dotted
</code></pre><p>上面的例子用了border-style。然而，它也可以和border-width 、 border-color一起使用。</p>
<h3 id="15-“border-width”-属性"><a href="#15-“border-width”-属性" class="headerlink" title="15. “border-width” 属性"></a>15. “border-width” 属性</h3><p>如果单独使用则不起作用。要先使用 “border-style” 属性来设置边框。</p>
<h3 id="16-CSS-轮廓（outline）"><a href="#16-CSS-轮廓（outline）" class="headerlink" title="16. CSS 轮廓（outline）"></a>16. CSS 轮廓（outline）</h3><p>轮廓（outline）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。<br>CSS outline 属性规定元素轮廓的样式、颜色和宽度。</p>
<h3 id="17-分组和嵌套-："><a href="#17-分组和嵌套-：" class="headerlink" title="17. 分组和嵌套 ："></a>17. 分组和嵌套 ：</h3><p>分组：样式表中有很多具有相同样式的元素。每个选择器用逗号分隔.<br>嵌套：适用于选择器内部的选择器的样式。</p>
<h3 id="18-visibility"><a href="#18-visibility" class="headerlink" title="18. visibility"></a>18. visibility</h3><blockquote>
<p>visibility:hidden可以隐藏某个元素，但隐藏的元素仍需占用与未隐藏之前一样的空间。也就是说，该元素虽然被隐藏了，但仍然会影响布局。</p>
<p>display:none可以隐藏某个元素，且隐藏的元素不会占用任何空间。也就是说，该元素不但被隐藏了，而且该元素原本占用的空间也会从页面布局中消失。</p>
</blockquote>
<h3 id="19-CSS-Positioning-定位"><a href="#19-CSS-Positioning-定位" class="headerlink" title="19. CSS Positioning(定位)"></a>19. CSS Positioning(定位)</h3><pre><code>Static 定位
    HTML元素的默认值，即没有定位，元素出现在正常的流中。
    静态定位的元素不会受到 top, bottom, left, right影响。
Fixed 定位
    元素的位置相对于浏览器窗口是固定位置。
    即使窗口是滚动的它也不会移动：
    注意： Fixed 定位在 IE7 和 IE8 下需要描述 !DOCTYPE 才能支持.
    Fixed定位使元素的位置与文档流无关，因此不占据空间。
    Fixed定位的元素和其他元素重叠。
Relative 定位
    相对定位元素的定位是相对其正常位置。可以移动的相对定位元素的内容和相互重叠的元素，它原本所占的空间不会改变。
    相对定位元素经常被用来作为绝对定位元素的容器块。
    即使相对定位元素的内容是移动,预留空间的元素仍保存在正常流动。
Absolute 定位
    绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于&lt;html&gt;; solutely定位使元素的位置与文档流无关，因此不占据空间。
</code></pre><p>Absolutely定位的元素和其他元素重叠。<br>    重叠的元素<br>        元素的定位与文档流无关，所以它们可以覆盖页面上的其它元素<br>        z-index属性指定了一个元素的堆叠顺序（哪个元素应该放在前面，或后面）<br>        一个元素可以有正数或负数的堆叠顺序：</p>
<h3 id="20-即使相对定位元素的内容是移动-预留空间的元素仍保存在正常流动。"><a href="#20-即使相对定位元素的内容是移动-预留空间的元素仍保存在正常流动。" class="headerlink" title="20. 即使相对定位元素的内容是移动,预留空间的元素仍保存在正常流动。"></a>20. 即使相对定位元素的内容是移动,预留空间的元素仍保存在正常流动。</h3><h3 id="21-CSS-的-Float（浮动）"><a href="#21-CSS-的-Float（浮动）" class="headerlink" title="21. CSS 的 Float（浮动）"></a>21. CSS 的 Float（浮动）</h3><p>会使元素向左或向右移动，其周围的元素也会重新排列。</p>
<pre><code>一个浮动元素会尽量向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。
浮动元素之后的元素将围绕它。
浮动元素之前的元素将不会受到影响。
</code></pre><h3 id="22-水平对齐"><a href="#22-水平对齐" class="headerlink" title="22. 水平对齐"></a>22. 水平对齐</h3><pre><code>中心对齐,使用margin属性
    块元素可以把左，右页边距设置为&quot;自动&quot;对齐。     margin: auto;  width: 70%; 如果宽度是100％，对齐是没有效果的。
    Note: 1. 在IE8中使用margin:auto属性无法正常工作，除非声明 !DOCTYPE, 
          2. IE5中块元素有一个margin处理BUG。需要加上text-align: left;

使用position属性设置左，右对齐
    元素对齐的方法之一是使用绝对定位：  position:absolute;  right:0px;  width:300px;

使用float属性设置左，右对齐
    使用float属性是对齐元素的方法之一：  float:right;  width:300px;
</code></pre><h3 id="23-Crossbrowser-兼容性问题"><a href="#23-Crossbrowser-兼容性问题" class="headerlink" title="23. Crossbrowser 兼容性问题"></a>23. Crossbrowser 兼容性问题</h3><p>类似这样的元素对齐时，预先确定margin和元素的填充，始终是一个好主意。这是为了避免在不同的浏览器中的可视化差异。<br>IE8和早期有一个问题，当使用position属性时。如果一个容器元素（在本例中<code>&lt;div class=&quot;container&quot;&gt;</code>）指定的宽度，!DOCTYPE声明是缺失，IE8和早期版本会在右边增添17px的margin。这似乎是一个滚动的预留空间。使用position属性时始终设置在DOCTYPE声明中！</p>
<h3 id="24-CSS-vertical-align"><a href="#24-CSS-vertical-align" class="headerlink" title="24. CSS vertical-align"></a>24. CSS vertical-align</h3><p>CSS中的确是有vertical-align属性，但是它只对(X)HTML元素中拥有valign特性的元素才生效，例如表格元素中的<code>&lt;td&gt;、&lt;th&gt;、&lt;caption&gt;</code>等，而像<code>&lt;div&gt;</code>、<code>&lt;span&gt;</code>这样的元素是没有valign特性的 !!!</p>
<h3 id="25-CSS组合选择符包括各种简单选择符的组合方式。"><a href="#25-CSS组合选择符包括各种简单选择符的组合方式。" class="headerlink" title="25. CSS组合选择符包括各种简单选择符的组合方式。"></a>25. CSS组合选择符包括各种简单选择符的组合方式。</h3><pre><code>在 CSS3 中包含了四种组合方式:
    1 后代选取器(以空格分隔)：后代选取器匹配所有值的元素的后代元素。
    2 子元素选择器(以大于号分隔）：只能选择作为某元素子元素的元素。
    3 相邻兄弟选择器（以加号分隔）：可选择紧接在另一元素后的元素，且二者有相同父元素。
    4 后续兄弟选择器（以波浪线分隔）：后续兄弟选择器选取所有指定元素之后的相邻兄弟元素。
</code></pre><h3 id="26-font-size-的取值"><a href="#26-font-size-的取值" class="headerlink" title="26. font-size 的取值"></a>26. font-size 的取值</h3><pre><code>xx-small
x-small
small
medium
large
x-large
xx-large
    把字体的尺寸设置为不同的尺寸，从 xx-small 到 xx-large。
    默认值：medium。
smaller    把 font-size 设置为比父元素更小的尺寸。
larger    把 font-size 设置为比父元素更大的尺寸。
length    把 font-size 设置为一个固定的值。
%        把 font-size 设置为基于父元素的一个百分比值。
inherit    规定应该从父元素继承字体尺寸。
</code></pre><h3 id="27-制作导航栏的时候"><a href="#27-制作导航栏的时候" class="headerlink" title="27.  制作导航栏的时候"></a>27.  制作导航栏的时候</h3><p> 请务必指定 <code>&lt;a&gt;</code>元素在垂直导航栏的的宽度。如果省略宽度，IE6可能产生意想不到的效果。</p>
<h3 id="28-CSS-伪类和伪元素："><a href="#28-CSS-伪类和伪元素：" class="headerlink" title="28. CSS 伪类和伪元素："></a>28. CSS 伪类和伪元素：</h3><pre><code>伪元素
    :checked    input:checked    选择所有选中的表单元素
    :disabled    input:disabled    选择所有禁用的表单元素
    :empty    p:empty    选择所有没有子元素的p元素
    :enabled    input:enabled    选择所有启用的表单元素
    :first-of-type    p:first-of-type    选择每个父元素是p元素的第一个p子元素
    :in-range    input:in-range    选择元素指定范围内的值
    :invalid    input:invalid    选择所有无效的元素
    :last-child    p:last-child    选择所有p元素的最后一个子元素
    :last-of-type    p:last-of-type    选择每个p元素是其母元素的最后一个p元素
    :not(selector)    :not(p)    选择所有p以外的元素
    :nth-child(n)    p:nth-child(2)    选择所有p元素的第二个子元素
    :nth-last-child(n)    p:nth-last-child(2)    选择所有p元素倒数的第二个子元素
    :nth-last-of-type(n)    p:nth-last-of-type(2)    选择所有p元素倒数的第二个为p的子元素
    :nth-of-type(n)    p:nth-of-type(2)    选择所有p元素第二个为p的子元素
    :only-of-type    p:only-of-type    选择所有仅有一个子元素为p的元素
    :only-child    p:only-child    选择所有仅有一个子元素的p元素
    :optional    input:optional    选择没有&quot;required&quot;的元素属性
    :out-of-range    input:out-of-range    选择指定范围以外的值的元素属性
    :read-only    input:read-only    选择只读属性的元素属性
    :read-write    input:read-write    选择没有只读属性的元素属性
    :required    input:required    选择有&quot;required&quot;属性指定的元素属性
    :root    root    选择文档的根元素
    :target    #news:target    选择当前活动#news元素(点击URL包含锚的名字)
    :valid    input:valid    选择所有有效值的属性

    :link    a:link    选择所有未访问链接
    :visited    a:visited    选择所有访问过的链接
    :active    a:active    选择正在活动链接
    :hover    a:hover    把鼠标放在链接上的状态

    :lang(language)    p:lang(it)    为&lt;p&gt;元素的lang属性选择一个开始值
    :focus    input:focus    选择元素输入后具有焦点
    :first-child    p:first-child    选择器匹配属于任意元素的第一个子元素的 &lt;p&gt; 元素

伪元素，建议用::
    ::first-letter    p::first-letter    选择每个&lt;p&gt; 元素的第一个字母
    ::first-line    p::first-line    选择每个&lt;p&gt; 元素的第一行

    ::before    p::before    在每个&lt;p&gt;元素之前插入内容
    ::after    p::after    在每个&lt;p&gt;元素之后插入内容


伪类可以与 CSS 类配合使用：
a.red:visited {color:#FF0000;}
</code></pre><p>但实际上 css3 为了区分两者，已经明确规定了伪类用一个冒号来表示，而伪元素则用两个冒号来表示。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">:hover</span></div><div class="line"><span class="symbol">:</span><span class="symbol">:first-child</span></div></pre></td></tr></table></figure></p>
<h3 id="29-注意：变更元素的显示类型"><a href="#29-注意：变更元素的显示类型" class="headerlink" title="29. 注意：变更元素的显示类型"></a>29. 注意：变更元素的显示类型</h3><blockquote>
<p>看该元素是如何显示，它是什么样的元素。例如：一个内联元素设置为display:block是不允许有它内部的嵌套块元素。</p>
</blockquote>
<h3 id="30-剪切元素的外形"><a href="#30-剪切元素的外形" class="headerlink" title="30. 剪切元素的外形"></a>30. 剪切元素的外形</h3><blockquote>
<p>clip ： 剪辑一个绝对定位的元素，唯一合法的形状值是：rect (top, right, bottom, left)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-tag">img</span> &#123;</div><div class="line">	<span class="attribute">position</span>:absolute;</div><div class="line">	<span class="attribute">clip</span>:<span class="built_in">rect</span>(0px,60px,200px,0px);</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"w3css.gif"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"140"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="31-水平居中在IE5中的特殊处理"><a href="#31-水平居中在IE5中的特殊处理" class="headerlink" title="31. 水平居中在IE5中的特殊处理"></a>31. 水平居中在IE5中的特殊处理</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span></div><div class="line">&#123;</div><div class="line">    <span class="attribute">text-align</span>:center;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.center</span></div><div class="line">&#123;</div><div class="line">    <span class="attribute">margin-left</span>:auto;</div><div class="line">    <span class="attribute">margin-right</span>:auto;</div><div class="line">    <span class="attribute">width</span>:<span class="number">70%</span>;</div><div class="line">    <span class="attribute">background-color</span>:<span class="number">#b0e0e6</span>;</div><div class="line">    <span class="attribute">text-align</span>:left;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="32-鼠标移上链接，出现方括号："><a href="#32-鼠标移上链接，出现方括号：" class="headerlink" title="32. 鼠标移上链接，出现方括号："></a>32. 鼠标移上链接，出现方括号：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span> &#123;</div><div class="line">	<span class="attribute">position</span>: relative;</div><div class="line">	<span class="attribute">display</span>: inline-block;</div><div class="line">	<span class="attribute">outline</span>: none;</div><div class="line">	<span class="attribute">text-decoration</span>: none;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#000</span>;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">32px</span>;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123; <span class="attribute">position</span>: absolute; &#125;</div><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123; <span class="attribute">content</span>: <span class="string">"\5B"</span>; <span class="attribute">left</span>: -<span class="number">20px</span>; &#125;</div><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123; <span class="attribute">content</span>: <span class="string">"\5D"</span>; <span class="attribute">right</span>:  -<span class="number">20px</span>; &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：在::before, ::after添加元素前，有一点需要注意的是，如果不需要内容仅配合样式属性做出效果，内容属性也不能为空，即 content:” “ 。否则，其他的样式属性一概不会生效。</p>
</blockquote>
<h3 id="33-空元素内部使用伪元素生成的内容-是真实的吗？"><a href="#33-空元素内部使用伪元素生成的内容-是真实的吗？" class="headerlink" title="33. 空元素内部使用伪元素生成的内容,是真实的吗？"></a>33. 空元素内部使用伪元素生成的内容,是真实的吗？</h3><blockquote>
<p>不真实，content属性动态生成的内容是纯粹的装饰而已，虚假的表象。是不被:empty伪类认可的，选择器依然认为这是个空元素。（所以才被称为伪元素…）<a href="http://www.zhangxinxu.com/wordpress/2015/04/before-after-pseudo-elements-special-features/" target="_blank" rel="external">链接：CSS之before, after伪元素特性表现两则</a></p>
</blockquote>
<h3 id="CSS-content"><a href="#CSS-content" class="headerlink" title="CSS content"></a>CSS content</h3><blockquote>
<p><a href="http://www.zhangxinxu.com/wordpress/2010/04/css-content%E5%86%85%E5%AE%B9%E7%94%9F%E6%88%90%E6%8A%80%E6%9C%AF%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8/" target="_blank" rel="external">链接： CSS content内容生成技术以及应用</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;CSS学习记录&quot;&gt;&lt;a href=&quot;#CSS学习记录&quot; class=&quot;headerlink&quot; title=&quot;CSS学习记录&quot;&gt;&lt;/a&gt;CSS学习记录&lt;/h1&gt;&lt;h3 id=&quot;1-什么是-CSS&quot;&gt;&lt;a href=&quot;#1-什么是-CSS&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是 CSS?&quot;&gt;&lt;/a&gt;1. 什么是 CSS?&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;CSS 指层叠样式表 (Cascading Style Sheets)
样式定义`如何显示` HTML 元素
样式通常存储在`样式表`中
把样式添加到 HTML 4.0 中，是为了`解决内容与表现分离的问题`
`外部样式表`可以极大提高工作效率
外部样式表通常存储在 `CSS 文件`中
多个样式定义可`层叠为一`
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-不要在属性值与单位之间留有空格&quot;&gt;&lt;a href=&quot;#2-不要在属性值与单位之间留有空格&quot; class=&quot;headerlink&quot; title=&quot;2.  不要在属性值与单位之间留有空格&quot;&gt;&lt;/a&gt;2.  不要在属性值与单位之间留有空格&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;（如：&lt;code&gt;margin-left: 20 px&lt;/code&gt; ），正确的写法是 &lt;code&gt;margin-left: 20px&lt;/code&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="front" scheme="http://www.erictxl.cn/categories/front/"/>
    
    
      <category term="前端基础" scheme="http://www.erictxl.cn/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="CSS" scheme="http://www.erictxl.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Html全标签回顾</title>
    <link href="http://www.erictxl.cn/2017/06/05/Html%E5%85%A8%E6%A0%87%E7%AD%BE%E5%9B%9E%E9%A1%BE/"/>
    <id>http://www.erictxl.cn/2017/06/05/Html全标签回顾/</id>
    <published>2017-06-05T15:13:32.000Z</published>
    <updated>2017-06-25T05:33:38.300Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””</p>
</blockquote>
<hr>
<h1 id="HTML学习记录"><a href="#HTML学习记录" class="headerlink" title="HTML学习记录"></a>HTML学习记录</h1><h3 id="1-关于-UTF-8"><a href="#1-关于-UTF-8" class="headerlink" title="1. 关于 UTF-8"></a>1. 关于 <code>UTF-8</code><br></h3><blockquote>
<p> <code>UTF-8</code> 是标准写法，php 在 Windows 下边英文不区分大小写，所以也可以写成 <code>utf-8</code>。<code>UTF-8</code> 也可以把中间的”-“省略，写成 <code>UTF8</code>。一般程序都能识别，但也有例外（如下文），为了严格一点，最好用标准的大写”UTF-8”。</p>
<p> 在数据库中只能使用<code>utf8</code>(MySQL) 在MySQL的命令模式中只能使用<code>utf8</code>，不能使用<code>utf-8</code>，也就是说在 PHP 程序中只能使用 <code>set names utf8</code>(不加小横杠)，如果你加了”-“此行命令将不会生效，但是在 PHP 中 header 时却要加上”-“，因为 IE 不认识没杠的<code>utf8</code>，原因见下文。<br>PHP 中的 header：</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> header(<span class="string">'Content-Type: text/html; charset=UTF-8'</span>); <span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>总结</strong>： 除了在MySQL命令 <code>mysql_query(set names utf8)</code> 外一律用大写<code>UTF-8</code>。<br><a id="more"></a></p>
<h3 id="2-后缀名选择：用-htm-还是用-html？"><a href="#2-后缀名选择：用-htm-还是用-html？" class="headerlink" title="2. 后缀名选择：用 htm 还是用 html？"></a>2. 后缀名选择：用 <code>htm</code> 还是用 <code>html</code>？</h3></blockquote>
<p>推荐使用长后缀名 <code>html</code> </p>
<h3 id="3-一些标签的使用，切记所有标签都需要闭合，不管是单体标签还是成对标签。（尽管目前浏览器是识别有些标签不闭合的情况，但是取的最好的保证兼容性，使用闭合）"><a href="#3-一些标签的使用，切记所有标签都需要闭合，不管是单体标签还是成对标签。（尽管目前浏览器是识别有些标签不闭合的情况，但是取的最好的保证兼容性，使用闭合）" class="headerlink" title="3. 一些标签的使用，切记所有标签都需要闭合，不管是单体标签还是成对标签。（尽管目前浏览器是识别有些标签不闭合的情况，但是取的最好的保证兼容性，使用闭合）"></a>3. 一些标签的使用，切记所有标签都需要闭合，不管是单体标签还是成对标签。（尽管目前浏览器是识别有些标签不闭合的情况，但是取的最好的保证兼容性，使用闭合）</h3><h3 id="4-标签写法要用小写字母（有些版本对大小写可认为相同，而xhtml中强制使用小写）"><a href="#4-标签写法要用小写字母（有些版本对大小写可认为相同，而xhtml中强制使用小写）" class="headerlink" title="4. 标签写法要用小写字母（有些版本对大小写可认为相同，而xhtml中强制使用小写）"></a>4. 标签写法要用小写字母（有些版本对大小写可认为相同，而xhtml中强制使用小写）</h3><h3 id="5-HTML-属性常用引用属性值-属性值应该始终被包括在引号内。"><a href="#5-HTML-属性常用引用属性值-属性值应该始终被包括在引号内。" class="headerlink" title="5. HTML 属性常用引用属性值,属性值应该始终被包括在引号内。"></a>5. HTML 属性常用引用属性值,属性值应该始终被包括在引号内。</h3><p>双引号是最常用的，不过使用单引号也没有问题。<br>Remark提示: 在某些个别的情况下，比如属性值本身就含有双引号，那么您必须使用单引号，例如：name=’John “ShotGun” Nelson’</p>
<h3 id="6-通常标签-lt-strong-gt-替换加粗标签-lt-b-gt-来使用-lt-em-gt-替换-lt-i-gt-标签使用。"><a href="#6-通常标签-lt-strong-gt-替换加粗标签-lt-b-gt-来使用-lt-em-gt-替换-lt-i-gt-标签使用。" class="headerlink" title="6. 通常标签 &lt;strong&gt; 替换加粗标签 &lt;b&gt; 来使用, &lt;em&gt; 替换 &lt;i&gt;标签使用。"></a>6. 通常标签 <code>&lt;strong&gt;</code> 替换加粗标签 <code>&lt;b&gt;</code> 来使用, <code>&lt;em&gt;</code> 替换 <code>&lt;i&gt;</code>标签使用。</h3><p>然而，这些标签的含义是不同的：<br><br><code>&lt;b&gt;</code> 与<code>&lt;i&gt;</code> 定义粗体或斜体文本。<br><code>&lt;strong&gt;</code> 或者 <code>&lt;em&gt;</code>意味着你要呈现的文本是重要的，所以要突出显示。现今所有主要浏览器都能渲染各种效果的字体。不过，未来浏览器可能会支持更好的渲染效果。</p>
<h3 id="7-对于非pre标签，浏览器会忽略源代码中的排版（省略了多余的空格和换行）以空格代替，段落的行数依赖于浏览器窗口的大小。如果调节浏览器窗口的大小，将改变段落中的行数。"><a href="#7-对于非pre标签，浏览器会忽略源代码中的排版（省略了多余的空格和换行）以空格代替，段落的行数依赖于浏览器窗口的大小。如果调节浏览器窗口的大小，将改变段落中的行数。" class="headerlink" title="7. 对于非pre标签，浏览器会忽略源代码中的排版（省略了多余的空格和换行）以空格代替，段落的行数依赖于浏览器窗口的大小。如果调节浏览器窗口的大小，将改变段落中的行数。"></a>7. 对于非pre标签，浏览器会忽略源代码中的排版（省略了多余的空格和换行）以空格代替，段落的行数依赖于浏览器窗口的大小。如果调节浏览器窗口的大小，将改变段落中的行数。</h3><h3 id="8-在标签-lt-a-gt-中使用了href属性来描述链接的地址。"><a href="#8-在标签-lt-a-gt-中使用了href属性来描述链接的地址。" class="headerlink" title="8. 在标签&lt;a&gt; 中使用了href属性来描述链接的地址。"></a>8. 在标签<code>&lt;a&gt;</code> 中使用了<code>href</code>属性来描述链接的地址。</h3><p>默认情况下，链接将以以下形式出现在浏览器中：</p>
<pre><code>一个未访问过的链接显示为蓝色字体并带有下划线。
访问过的链接显示为紫色并带有下划线。
点击链接时，链接显示为红色并带有下划线。
</code></pre><blockquote>
<p>注意：如果为这些超链接设置了 CSS 样式，展示样式会根据 CSS 的设定而显示。</p>
</blockquote>
<h3 id="9-锚点：在HTML文档中插入ID"><a href="#9-锚点：在HTML文档中插入ID" class="headerlink" title="9. 锚点：在HTML文档中插入ID:"></a>9. 锚点：在HTML文档中插入ID:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"tips"</span>&gt;</span>有用的提示部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">在HTML文档中创建一个链接到"有用的提示部分(id="tips"）"：</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#tips"</span>&gt;</span>访问有用的提示部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">或者，从另一个页面创建一个链接到"有用的提示部分(id="tips"）"：</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.runoob.com/html/html-links.html#tips"</span>&gt;</span></div><div class="line">访问有用的提示部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="10-养成好习惯，链接后面始终带上"><a href="#10-养成好习惯，链接后面始终带上" class="headerlink" title="10. 养成好习惯，链接后面始终带上/"></a>10. 养成好习惯，链接后面始终带上/</h3><p>假如这样书写链接：href=”<a href="http://www.runoob.com/html&quot;，就会向服务器产生两次" target="_blank" rel="external">http://www.runoob.com/html&quot;，就会向服务器产生两次</a> HTTP 请求。这是因为服务器会添加正斜杠到这个地址，然后创建一个新的请求，就像这样：href=”<a href="http://www.runoob.com/html/&quot;。" target="_blank" rel="external">http://www.runoob.com/html/&quot;。</a></p>
<h3 id="11-html头部"><a href="#11-html头部" class="headerlink" title="11. html头部"></a>11. html头部</h3><pre><code>`&lt;base&gt;` - 定义了所有链接的URL
使用 `&lt;base&gt;` 定义页面中所有链接默认的链接目标地址。
&lt;meta&gt; - 提供了HTML文档的meta标记
使用 &lt;meta&gt; 元素来描述HTML文档的描述，关键词，作者，字符集等。
</code></pre><h3 id="12-lt-head-gt-元素包含了所有的头部标签元素。在-lt-head-gt-元素中你可以插入脚本（scripts）-样式文件（CSS），及各种meta信息。"><a href="#12-lt-head-gt-元素包含了所有的头部标签元素。在-lt-head-gt-元素中你可以插入脚本（scripts）-样式文件（CSS），及各种meta信息。" class="headerlink" title="12. &lt;head&gt; 元素包含了所有的头部标签元素。在 &lt;head&gt;元素中你可以插入脚本（scripts）, 样式文件（CSS），及各种meta信息。"></a>12. <code>&lt;head&gt;</code> 元素包含了所有的头部标签元素。在 <code>&lt;head&gt;</code>元素中你可以插入脚本（scripts）, 样式文件（CSS），及各种meta信息。</h3><p>可以添加在头部区域的元素标签为: <code>&lt;title&gt;, &lt;style&gt;, &lt;meta&gt;, &lt;link&gt;, &lt;script&gt;, &lt;noscript&gt;, and &lt;base&gt;.</code></p>
<h3 id="13-HTML-lt-title-gt-元素"><a href="#13-HTML-lt-title-gt-元素" class="headerlink" title="13. HTML &lt;title&gt; 元素"></a>13. HTML <code>&lt;title&gt;</code> 元素</h3><p><code>&lt;title&gt;</code> 标签定义了不同文档的标题。<br><code>&lt;title&gt;</code> 在 HTML/XHTML 文档中是必须的。</p>
<pre><code>`&lt;title&gt;` 元素:
    定义了浏览器工具栏的标题
    当网页添加到收藏夹时，显示在收藏夹中的标题
    显示在搜索引擎结果页面的标题
</code></pre><h3 id="14-每30秒中刷新当前页面"><a href="#14-每30秒中刷新当前页面" class="headerlink" title="14. 每30秒中刷新当前页面:"></a>14. 每30秒中刷新当前页面:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"30"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="15-现在通常使用font-family-字体-color-颜色-font-size-字体大小-属性来定义文本样式，代替font标签"><a href="#15-现在通常使用font-family-字体-color-颜色-font-size-字体大小-属性来定义文本样式，代替font标签" class="headerlink" title="15. 现在通常使用font-family(字体),color(颜色),font-size(字体大小) 属性来定义文本样式，代替font标签"></a>15. 现在通常使用font-family(字体),color(颜色),font-size(字体大小) 属性来定义文本样式，代替font标签</h3><h3 id="16-加载图像时，-假如某个-HTML-文件包含十个图像，那么为了正确显示这个页面，需要加载-11-个文件。加载图片是需要时间的，所以我们的建议是：慎用图片。"><a href="#16-加载图像时，-假如某个-HTML-文件包含十个图像，那么为了正确显示这个页面，需要加载-11-个文件。加载图片是需要时间的，所以我们的建议是：慎用图片。" class="headerlink" title="16. 加载图像时， 假如某个 HTML 文件包含十个图像，那么为了正确显示这个页面，需要加载 11 个文件。加载图片是需要时间的，所以我们的建议是：慎用图片。"></a>16. 加载图像时， 假如某个 HTML 文件包含十个图像，那么为了正确显示这个页面，需要加载 11 个文件。加载图片是需要时间的，所以我们的建议是：慎用图片。</h3><pre><code>注意: 加载页面时，要注意插入页面图像的路径，如果不能正确设置图像的位置，浏览器无法加载图片，图像标签就会显示一个破碎的图片。这样的用户体验非常不好，因此，图片必须加上`alt`属性 - 在图片加载不出来时，显示图片的提示信息，告诉用户这是什么。
</code></pre><h3 id="17-单元格边距-Cell-padding"><a href="#17-单元格边距-Cell-padding" class="headerlink" title="17. 单元格边距(Cell padding)"></a>17. 单元格边距(Cell padding)</h3><p>本例演示如何使用 Cell padding 来创建单元格内容与其边框之间的空白。<br>单元格间距(Cell spacing)增加单元格之间的距离。</p>
<blockquote>
<ol>
<li><p><code>&lt;div&gt;</code> 元素的另一个常见的用途是文档布局。它取代了使用表格定义布局的老式方法。使用 <code>&lt;table&gt;</code> 元素进行文档布局不是表格的正确用法。<code>&lt;table&gt;</code> 元素的作用是显示表格化的数据。</p>
</li>
<li><p><code>&lt;span&gt;</code> 用于对文档中的行内元素进行组合。<br><code>&lt;span&gt;</code> 标签没有固定的格式表现。当对它应用样式时，它才会产生视觉上的变化。如果不对 <code>&lt;span&gt;</code> 应用样式，那么 <code>&lt;span&gt;</code> 元素中的文本与其他文本不会任何视觉上的差异。<br><br><code>&lt;span&gt;</code> 标签提供了一种将文本的一部分或者文档的一部分独立出来的方式。</p>
</li>
<li><p>虽然我们可以使用HTML table标签来设计出漂亮的布局，但是table标签是不建议作为布局工具使用的 - 表格不是布局工具。</p>
</li>
<li><p>HTML 布局 - 有用的提示<br><br><font color="red">Tip: </font>　 使用 CSS 最大的好处是，如果把 CSS 代码存放到外部样式表中，那么站点会更易于维护。通过编辑单一的文件，就可以改变所有页面的布局。如需学习更多有关 CSS 的知识，请访问我们的CSS 教程。<br><br><font color="red">Tip:</font>　 由于创建高级的布局非常耗时，使用模板是一个快速的选项。通过搜索引擎可以找到很多免费的网站模板（您可以使用这些预先构建好的网站布局，并优化它们）。</p>
</li>
<li><p>表单本身是不可见的。并且注意一个文本字段的默认宽度是20个字符。</p>
</li>
<li><p>Internet Explorer 10、Firefox、Chrome 和 Safari 支持 maxlength 属性。Opera 或者 Internet Explorer 9 及之前的版本不支持 textarea 标签的 maxlength 属性。</p>
</li>
<li><p>1600万种不同颜色<br>三种颜色 红，绿，蓝的组合从0到255，一共有1600万种不同颜色(256 x 256 x 256)。<br>在下面的颜色表中你会看到不同的结果，从0到255的红色，同时设置绿色和蓝色的值为0,随着红色的值变化，不同的值都显示了不同的颜色。</p>
</li>
<li><p>Web安全色?<br><br>数年以前，当大多数计算机仅支持 256 种颜色的时候，一系列 216 种 Web 安全色作为 Web 标准被建议使用。其中的原因是，微软和 Mac 操作系统使用了 40 种不同的保留的固定系统颜色（双方大约各使用 20 种）。<br>我们不确定如今这么做的意义有多大，因为越来越多的计算机有能力处理数百万种颜色，不过做选择还是你自己。<br>最初，216 跨平台 web 安全色被用来确保：当计算机使用 256 色调色板时，所有的计算机能够正确地显示所有的颜色。</p>
</li>
<li><p>141个颜色名称是在HTML和CSS颜色规范定义的（17标准颜色，再加124）。下表列出了所有颜色的值，包括十六进制值。<br><br>提示: <code>17标准颜色</code>：黑色，蓝色，水，紫红色，灰色，绿色，石灰，栗色，海军，橄榄，橙，紫，红，白，银，蓝绿色，黄色。点击其中一个颜色名称（或一个十六进制值）就可以查看与不同文字颜色搭配的背景颜色。：</p>
</li>
<li><p>HTML 字符实体<br><br>HTML 中的预留字符必须被替换为字符实体。一些在键盘上找不到的字符也可以使用字符实体来替换。<font color="orange">实体名称对大小写敏感！</font></p>
</li>
<li><p>HTML 统一资源定位器(Uniform Resource Locators)<br><br>URL 是一个网页地址。<br>URL可以由字母组成，如”runoob.com”，或互联网协议（IP）地址： 192.68.20.50。大多数人进入网站使用网站域名来访问，因为 名字比数字更容易记住。Web浏览器通过URL从Web服务器请求页面。</p>
</li>
</ol>
</blockquote>
<pre><code>语法规则:
scheme://host.domain:port/path/filename
说明:
    scheme - 定义因特网服务的类型。最常见的类型是 http
    host - 定义域主机（http 的默认主机是 www）
    domain - 定义因特网域名，比如 runoob.com
    :port - 定义主机上的端口号（http 的默认端口号是 80）
    path - 定义服务器上的路径（如果省略，则文档必须位于网站的根目录中）。
    filename - 定义文档/资源的名称

    Scheme    访问                        用于...
    http    超文本传输协议       以http:// 开头的普通网页不加密。
    https    安全超文本传输协议   安全网页，加密所有信息交换。
    ftp    文件传输协议          用于将文件下载或上传至网站。
    file        您计算机上的文件。
</code></pre><blockquote>
<ol>
<li><p>通用声明<br>HTML5<br><br><code>&lt;!DOCTYPE html&gt;</code><br><br>HTML 4.01<br><br><code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;
&quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</code><br><br>XHTML 1.0<br><br><code>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;
&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</code></p>
</li>
<li><p>一些简单的术语</p>
<ul>
<li>网页 ：由各种标记组成的一个页面就叫网页 .</li>
<li>主页(首页) : 一个网站的起始页面或者导航页面 .</li>
<li>标记: <code>&lt;p&gt;</code>称为开始标记  <code>&lt;/p&gt;</code>称为结束标记. 也叫标签.每个标签都规定好了特殊的含义。</li>
<li>元素：<code>&lt;p&gt;</code> 内容 <code>&lt;/p&gt;</code> 称为元素.</li>
<li>属性： 给每一个标签所做的辅助信息。</li>
<li><code>xhtml</code>： 符合 <code>XML</code> 语法标准的 <code>HTML</code> 。</li>
<li><code>dhtml</code>：dynamic ,动态的。<code>javascript + css + html</code> 合起来的页面就是一个 <code>dhtml</code> </li>
<li><code>http</code>：协议标准。用来规定客户端浏览器和服务端交互时数据的一个格式。</li>
<li>SMTP: 邮件传输协议</li>
<li>ftp: 文件传输协议.</li>
</ul>
</li>
<li><p>如何将 HTML 转换为 XHTML<br><br>添加一个 <code>XHTML &lt;!DOCTYPE&gt;</code> 到你的网页中<br>添加 <code>xmlns</code> 属性添加到每个页面的html元素中。<br>改变所有的元素为小写<br>关闭所有的空元素<br>修改所有的属性名称为小写<br>所有属性值添加引号</p>
</li>
</ol>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;HTML学习记录&quot;&gt;&lt;a href=&quot;#HTML学习记录&quot; class=&quot;headerlink&quot; title=&quot;HTML学习记录&quot;&gt;&lt;/a&gt;HTML学习记录&lt;/h1&gt;&lt;h3 id=&quot;1-关于-UTF-8&quot;&gt;&lt;a href=&quot;#1-关于-UTF-8&quot; class=&quot;headerlink&quot; title=&quot;1. 关于 UTF-8&quot;&gt;&lt;/a&gt;1. 关于 &lt;code&gt;UTF-8&lt;/code&gt;&lt;br&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt; &lt;code&gt;UTF-8&lt;/code&gt; 是标准写法，php 在 Windows 下边英文不区分大小写，所以也可以写成 &lt;code&gt;utf-8&lt;/code&gt;。&lt;code&gt;UTF-8&lt;/code&gt; 也可以把中间的”-“省略，写成 &lt;code&gt;UTF8&lt;/code&gt;。一般程序都能识别，但也有例外（如下文），为了严格一点，最好用标准的大写”UTF-8”。&lt;/p&gt;
&lt;p&gt; 在数据库中只能使用&lt;code&gt;utf8&lt;/code&gt;(MySQL) 在MySQL的命令模式中只能使用&lt;code&gt;utf8&lt;/code&gt;，不能使用&lt;code&gt;utf-8&lt;/code&gt;，也就是说在 PHP 程序中只能使用 &lt;code&gt;set names utf8&lt;/code&gt;(不加小横杠)，如果你加了”-“此行命令将不会生效，但是在 PHP 中 header 时却要加上”-“，因为 IE 不认识没杠的&lt;code&gt;utf8&lt;/code&gt;，原因见下文。&lt;br&gt;PHP 中的 header：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt; header(&lt;span class=&quot;string&quot;&gt;&#39;Content-Type: text/html; charset=UTF-8&#39;&lt;/span&gt;); &lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;： 除了在MySQL命令 &lt;code&gt;mysql_query(set names utf8)&lt;/code&gt; 外一律用大写&lt;code&gt;UTF-8&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="front" scheme="http://www.erictxl.cn/categories/front/"/>
    
    
      <category term="前端基础" scheme="http://www.erictxl.cn/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Html" scheme="http://www.erictxl.cn/tags/Html/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown语法介绍及进阶使用</title>
    <link href="http://www.erictxl.cn/2017/05/14/MarkDown%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D%E5%8F%8A%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.erictxl.cn/2017/05/14/MarkDown语法介绍及进阶使用/</id>
    <published>2017-05-14T07:20:38.000Z</published>
    <updated>2017-06-20T02:52:14.903Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””</p>
</blockquote>
<hr>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=30903117&auto=0&height=66"></iframe>


<h1 id="什么是markdown？"><a href="#什么是markdown？" class="headerlink" title="什么是markdown？"></a>什么是markdown？</h1><blockquote>
<p>Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的 HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。<br><a id="more"></a></p>
</blockquote>
<h1 id="MarkDown简单语法应用"><a href="#MarkDown简单语法应用" class="headerlink" title="MarkDown简单语法应用"></a>MarkDown简单语法应用</h1><blockquote>
<p>这些简单语法很多博客上都有，我就不意义赘述了，附上参考链接 <a href="http://www.jianshu.com/p/1e402922ee32/" target="_blank" rel="external">http://www.jianshu.com/p/1e402922ee32/</a>算了还是写进博客吧，免得新开页面~(^_−)☆<br>直接看效果和例子-&gt;</p>
</blockquote>
<h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h2><p><strong> –&gt; 例子</strong></p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 一级标题</div><div class="line">## 二级标题</div><div class="line">### 三级标题</div><div class="line">#### 四级标题</div><div class="line">##### 五级标题</div><div class="line">###### 六级标题</div></pre></td></tr></table></figure>
<p><strong> –&gt; 效果</strong></p>
<blockquote>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote>
<h2 id="2-列表"><a href="#2-列表" class="headerlink" title="2. 列表"></a>2. 列表</h2><p>分为有序列表和无序列表，用<code>- + *</code>实现，不过符号之后的空格不能少，-+*效果一样，但不能混合使用(列表快块要用就用一样的)，因混合是嵌套列表，内容可超长</p>
<h3 id="2-1-无序列表"><a href="#2-1-无序列表" class="headerlink" title="2.1 无序列表"></a>2.1 无序列表</h3><p><strong> –&gt; 例子</strong></p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> 无序列表</span></div><div class="line">-<span class="ruby"> 无序列表</span></div><div class="line">-<span class="ruby"> 无序列表</span></div><div class="line">-<span class="ruby"> 无序列表：测试长文本，Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World (超长会自动换行)</span></div></pre></td></tr></table></figure>
<p><strong> –&gt; 效果</strong></p>
<ul>
<li>无序列表</li>
<li>无序列表</li>
<li>无序列表</li>
<li>无序列表：测试长文本，Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World (超长会自动换行)</li>
</ul>
<h3 id="2-2-有序列表"><a href="#2-2-有序列表" class="headerlink" title="2.2 有序列表"></a>2.2 有序列表</h3><p>自己添加数字，如果无序会自动转换成有序<br><strong> –&gt; 例子</strong></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">b. 有序列表</div><div class="line"><span class="bullet">5. </span>有序列表</div><div class="line"><span class="bullet">3. </span>有序列表</div></pre></td></tr></table></figure>
<p><strong> –&gt; 效果</strong></p>
<ol>
<li>有序列表</li>
<li>有序列表</li>
<li>有序列表</li>
</ol>
<h3 id="2-3-嵌套列表"><a href="#2-3-嵌套列表" class="headerlink" title="2.3 嵌套列表"></a>2.3 嵌套列表</h3><p><strong> –&gt; 例子</strong></p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> 嵌套列表</span></div><div class="line"> + 嵌套列表</div><div class="line"> + 嵌套列表</div><div class="line">  -<span class="ruby"> 嵌套列表</span></div><div class="line">   * 嵌套列表</div><div class="line">-<span class="ruby"> 嵌套列表</span></div></pre></td></tr></table></figure>
<p><strong> –&gt; 效果</strong></p>
<ul>
<li>嵌套列表<ul>
<li>嵌套列表</li>
<li>嵌套列表</li>
</ul>
<ul>
<li>嵌套列表<ul>
<li>嵌套列表</li>
</ul>
</li>
</ul>
</li>
<li>嵌套列表</li>
</ul>
<p>(hexo博客的markdown渲染不出来？。。。大家可以在markdown编辑器或者有支持markdown的插件里试一下，可以实现嵌套)</p>
<h2 id="3-引用"><a href="#3-引用" class="headerlink" title="3. 引用"></a>3. 引用</h2><p>这个简单，只需要在文本前加入 &gt; 这种尖括号（大于号）即可，如果想要多层签套，那么多加几个&gt;即可<br><strong> –&gt; 例子</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> Hello World!</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt; Hello World!</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Hello World!</span></div></pre></td></tr></table></figure>
<p><strong> –&gt; 效果</strong></p>
<blockquote>
<p>Hello World!</p>
<blockquote>
<p>Hello World!</p>
<blockquote>
<p>Hello World!</p>
</blockquote>
</blockquote>
</blockquote>
<p><strong>[注]</strong> 代码区块的引用，直接tab键就可以形成一个区块，里面的Markdown 语法都会作为文本显示</p>
<h2 id="4-图片与链接"><a href="#4-图片与链接" class="headerlink" title="4. 图片与链接"></a>4. 图片与链接</h2><p>插入链接与插入图片的语法很像，区别在一个 !号<br>图片为：<code>![](){ImgCap}{/ImgCap}</code><br>链接为：<code>[]()</code></p>
<p>插入图片的地址需要图床，我用的是新浪微博相册的图床，右键辅复制图片URL地址即可。</p>
<h3 id="4-1-图片"><a href="#4-1-图片" class="headerlink" title="4.1 图片"></a>4.1 图片</h3><p><strong> –&gt; 例子</strong></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="string">提示信息</span>](<span class="link">http://wx4.sinaimg.cn/mw690/006xRFa6gy1ffldjgxu9bj31hc0u0b29.jpg</span>)</div></pre></td></tr></table></figure>
<p><strong> –&gt; 效果</strong></p>
<p><img src="http://wx4.sinaimg.cn/mw690/006xRFa6gy1ffldjgxu9bj31hc0u0b29.jpg" alt="提示信息"></p>
<h3 id="4-2-链接"><a href="#4-2-链接" class="headerlink" title="4.2 链接"></a>4.2 链接</h3><p><strong> –&gt; 例子</strong></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="string">显示的文本</span>](<span class="link">链接 "提示信息"</span>)</div><div class="line">[<span class="string">哔哩哔哩</span>](<span class="link">www.bilibili.com</span>)</div></pre></td></tr></table></figure>
<p><strong> –&gt; 效果</strong></p>
<p><a href="www.bilibili.com" title="B站">哔哩哔哩</a></p>
<h2 id="5-粗体与斜体"><a href="#5-粗体与斜体" class="headerlink" title="5. 粗体与斜体"></a>5. 粗体与斜体</h2><p>Markdown 的粗体和斜体也非常简单，用两个<code>** / __</code>包含一段文本就是粗体的语法，用一个<code>* / _</code>包含一段文本就是斜体的语法。<br>星号与下划线都可以，单是斜体，双是粗体，符号可跨行，符号可加空格<br><strong> –&gt; 例子</strong></p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">*<span class="strong">*Hello World*</span>*</div><div class="line"><span class="bullet">** </span>Hello World **</div><div class="line">_<span class="emphasis">_Hello World_</span>_</div><div class="line"></div><div class="line"><span class="bullet">** </span>Hello</div><div class="line">World **</div><div class="line"></div><div class="line"><span class="strong">*Hello</span></div><div class="line">world*</div><div class="line"></div><div class="line"><span class="emphasis">_Hello World_</span></div></pre></td></tr></table></figure>
<p><strong> –&gt; 效果</strong></p>
<p><strong>Hello World</strong><br><strong> Hello World </strong><br><strong>Hello World</strong></p>
<p><strong> Hello<br>World </strong></p>
<p><em>Hello<br>world</em></p>
<p><em>Hello World</em></p>
<h2 id="6-表格"><a href="#6-表格" class="headerlink" title="6. 表格"></a>6. 表格</h2><p>表格如果用markdown语法解决的话，超麻烦,后面优化里会有解决办法<br><strong> –&gt; 例子</strong></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="params">| Tables        |</span> Are           <span class="params">| Cool  |</span></div><div class="line"><span class="params">| ------------- |</span><span class="symbol">:-------------</span><span class="symbol">:|</span> -----<span class="symbol">:|</span></div><div class="line"><span class="params">| col 3 is      |</span> right-aligned <span class="params">| $1600 |</span></div><div class="line"><span class="params">| col 2 is      |</span> centered      <span class="params">|   $12 |</span></div><div class="line"><span class="params">| zebra stripes |</span> are neat      <span class="params">|    $1 |</span></div><div class="line"></div><div class="line">header <span class="number">1</span> <span class="params">| header 2 |</span> header <span class="number">3</span></div><div class="line">---<span class="params">|---|</span>---</div><div class="line">row <span class="number">1</span> col <span class="number">1</span> <span class="params">| row 1 col 2 |</span>  row <span class="number">2</span> col <span class="number">3</span></div><div class="line">row <span class="number">2</span> col <span class="number">1</span> <span class="params">| row 2 col 2 |</span>  row <span class="number">3</span> col <span class="number">3</span></div></pre></td></tr></table></figure>
<p><strong> –&gt; 效果</strong></p>
<table>
<thead>
<tr>
<th>Tables</th>
<th style="text-align:center">Are</th>
<th style="text-align:right">Cool</th>
</tr>
</thead>
<tbody>
<tr>
<td>col 3 is</td>
<td style="text-align:center">right-aligned</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td>zebra stripes</td>
<td style="text-align:center">are neat</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>header 1</th>
<th>header 2</th>
<th>header 3</th>
</tr>
</thead>
<tbody>
<tr>
<td>row 1 col 1</td>
<td>row 1 col 2</td>
<td>row 2 col 3</td>
</tr>
<tr>
<td>row 2 col 1</td>
<td>row 2 col 2</td>
<td>row 3 col 3</td>
</tr>
</tbody>
</table>
<h2 id="7-代码框"><a href="#7-代码框" class="headerlink" title="7. 代码框"></a>7. 代码框</h2><p>如果你是个程序猿，需要在文章里优雅的引用代码框，在 Markdown下实现也非常简单，只需要用两个 ` ` 把中间的代码包裹起来。</p>
<h3 id="7-1-普通短文本代码"><a href="#7-1-普通短文本代码" class="headerlink" title="7.1 普通短文本代码"></a>7.1 普通短文本代码</h3><p><strong> –&gt; 例子</strong></p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`Hello`</div></pre></td></tr></table></figure>
<p><strong> –&gt; 效果</strong></p>
<p><code>Hello</code></p>
<h3 id="7-2-代码：段落代码"><a href="#7-2-代码：段落代码" class="headerlink" title="7.2 代码：段落代码"></a>7.2 代码：段落代码</h3><p>每行文字前加4个空格或者1个Tab,当代码很长，用三个```  ```<br><strong> –&gt; 例子</strong></p>
<pre><code>val s = &quot;hello Markdown&quot;
println( s )
val s = &quot;hello Markdown&quot;
println( s )
</code></pre><p><strong> –&gt; 效果</strong></p>
<pre><code>val s = &quot;hello Markdown&quot;
println( s )
val s = &quot;hello Markdown&quot;
println( s )
</code></pre><h2 id="8-分割线"><a href="#8-分割线" class="headerlink" title="8. 分割线"></a>8. 分割线</h2><p>三个或更多<code>-_*</code>，必须单独一行，可含空格<br>大标题: <code>===</code><br>小标题: <code>---</code><br><strong> –&gt; 例子</strong></p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="string">***</span></div><div class="line"><span class="string">___</span></div></pre></td></tr></table></figure>
<h2 id="–-gt-效果"><a href="#–-gt-效果" class="headerlink" title=" –&gt; 效果"></a><strong> –&gt; 效果</strong></h2><hr>
<hr>
<h1 id="MarkDown进阶"><a href="#MarkDown进阶" class="headerlink" title="MarkDown进阶"></a>MarkDown进阶</h1><blockquote>
<p>一句话，markdown支持html语法！！！这意味着什么？<br>如果发现新功能，之后会计时更新补充(^_−)☆</p>
</blockquote>
<h2 id="1-支持基本的HTML标签"><a href="#1-支持基本的HTML标签" class="headerlink" title="1. 支持基本的HTML标签"></a>1. 支持基本的HTML标签</h2><h3 id="图片居中"><a href="#图片居中" class="headerlink" title="图片居中"></a>图片居中</h3><p>利用center标签<br><strong> –&gt; 例子</strong></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span>![<span class="string">提示信息</span>](<span class="link">http://wx4.sinaimg.cn/mw690/006xRFa6gy1ffldjgxu9bj31hc0u0b29.jpg</span>)<span class="xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p><strong> –&gt; 效果</strong></p>
<center><img src="http://wx4.sinaimg.cn/mw690/006xRFa6gy1ffldjgxu9bj31hc0u0b29.jpg" alt="提示信息"></center>

<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p><strong> –&gt; 例子</strong></p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;font <span class="attribute">face</span>=<span class="string">"黑体"</span>&gt;我是黑体字&lt;/font&gt;</div><div class="line">&lt;font <span class="attribute">face</span>=<span class="string">"微软雅黑"</span>&gt;我是微软雅黑&lt;/font&gt;</div><div class="line">&lt;font <span class="attribute">face</span>=<span class="string">"STCAIYUN"</span>&gt;我是华文彩云&lt;/font&gt;</div><div class="line">&lt;font <span class="attribute">color</span>=#0099ff <span class="attribute">size</span>=12 <span class="attribute">face</span>=<span class="string">"黑体"</span>&gt;黑体&lt;/font&gt;</div><div class="line">&lt;font <span class="attribute">color</span>=#00ffff <span class="attribute">size</span>=3&gt;null&lt;/font&gt;</div><div class="line">&lt;font <span class="attribute">color</span>=gray <span class="attribute">size</span>=5&gt;gray&lt;/font&gt;</div></pre></td></tr></table></figure>
<p><strong> –&gt; 效果</strong></p>
<font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color="#0099ff" size="12" face="黑体">黑体</font><br><font color="red" size="12">Hello World</font><br><font color="#00ffff" size="3">null</font><br><font color="gray" size="5">gray</font>

<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><strong> –&gt; 例子</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">caption</span>&gt;</span>实现markdown表格<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>第一列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>第二列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>第三列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<p>(应该是hexo的markdown渲染问题，原理上不应该显示那么大一片空白的，其他编辑器里可以正常显示)<br><strong> –&gt; 效果</strong></p>
<table><br>  <caption>实现markdown表格</caption><br>   <thead><br>        </thead><td>第一列</td><br>        <td>第二列</td><br>        <td>第三列</td><br>   <br>   <tbody><br>    <tr><br>        <td>1</td><br>        <td>2</td><br>        <td>3</td><br>    </tr><br>    <tr><br>        <td>1</td><br>        <td>2</td><br>        <td>3</td><br>    </tr><br>    <tr><br>        <td>1</td><br>        <td>2</td><br>        <td>3</td><br>    </tr><br>    </tbody><br></table>

<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p><strong> –&gt; 例子</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 注释 --&gt;</span></div></pre></td></tr></table></figure>
<p><strong> –&gt; 效果</strong></p>
<!-- 注释 -->
<h2 id="2-特殊一点的技巧"><a href="#2-特殊一点的技巧" class="headerlink" title="2. 特殊一点的技巧"></a>2. 特殊一点的技巧</h2><h3 id="索引超链：Reference方式"><a href="#索引超链：Reference方式" class="headerlink" title="索引超链：Reference方式"></a>索引超链：Reference方式</h3><p>索引，1 可以是任意字符<br><strong> –&gt; 例子</strong></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="string">哔哩哔哩</span>][<span class="symbol">1</span>]</div><div class="line">[<span class="string">Github</span>][<span class="symbol">2</span>]</div><div class="line">[<span class="symbol">1</span>]:<span class="link">www.bilibili.com</span></div><div class="line">[<span class="symbol">2</span>]:<span class="link">www.github.com</span></div></pre></td></tr></table></figure>
<p><strong> –&gt; 效果</strong></p>
<p><a href="www.bilibili.com">哔哩哔哩</a><br><a href="www.github.com">Github</a></p>
<h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>尖括号<br><strong> –&gt; 例子</strong></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="string">http:</span><span class="comment">//www.baidu.com&gt;</span></div><div class="line">&lt;<span class="number">2973978759</span><span class="meta">@qq</span>.com&gt;</div></pre></td></tr></table></figure>
<p><strong> –&gt; 效果</strong></p>
<p><a href="http://www.baidu.com" target="_blank" rel="external">http://www.baidu.com</a><br><a href="&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#50;&#x39;&#x37;&#x33;&#x39;&#x37;&#56;&#55;&#x35;&#57;&#x40;&#113;&#x71;&#46;&#99;&#x6f;&#109;">&#50;&#x39;&#x37;&#x33;&#x39;&#x37;&#56;&#55;&#x35;&#57;&#x40;&#113;&#x71;&#46;&#99;&#x6f;&#109;</a></p>
<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>Markdown中的转义字符为\，转义的有：</p>
<p>\ 反斜杠<br>` 反引号<br>* 星号<br>_ 下划线<br>{} 大括号<br>[] 中括号<br>() 小括号<br># 井号<br>+ 加号<br>- 减号<br>. 英文句号<br>! 感叹号</p>
<h2 id="3-支持导入css样式表"><a href="#3-支持导入css样式表" class="headerlink" title="3. 支持导入css样式表"></a>3. 支持导入css样式表</h2><p>这里只举两个例子</p>
<h3 id="让你的文章可以显示QQ小表情"><a href="#让你的文章可以显示QQ小表情" class="headerlink" title="让你的文章可以显示QQ小表情"></a>让你的文章可以显示QQ小表情</h3><p>导入一个css库即可<br><strong> –&gt; 例子</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;link href=<span class="string">"https://afeld.github.io/emoji-css/emoji.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"em em-trollface"</span> <span class="attr">style</span>=<span class="string">" height: 100px; width: 100px; background-color: red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">    &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"em em-trollface"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></div><div class="line">    &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"em em-angry"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></div><div class="line">    &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"em em-apple"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></div><div class="line">    &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"em em-astonished"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></div><div class="line">    &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"em em-blush"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></div><div class="line">    &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"em em-confounded"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p><strong> –&gt; 效果</strong></p>
<p><link href="https://afeld.github.io/emoji-css/emoji.css" rel="stylesheet"></p>
<div class="em em-trollface" style=" height: 100px; width: 100px; background-color: red;"></div><br>    <i class="em em-trollface"></i><br>    <i class="em em-angry"></i><br>    <i class="em em-apple"></i><br>    <i class="em em-astonished"></i><br>    <i class="em em-blush"></i><br>    <i class="em em-confounded"></i><br><br><br>### 页面显示CSS3的动画效果<br><br><strong> –&gt; 例子</strong><br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.test</span></div><div class="line">&#123;</div><div class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">background</span>:red;</div><div class="line">	<span class="attribute">position</span>:relative;</div><div class="line">	<span class="attribute">animation</span>:myfirst <span class="number">5s</span> linear <span class="number">2s</span> infinite alternate;</div><div class="line">	<span class="comment">/* Firefox: */</span></div><div class="line">	<span class="attribute">-moz-animation</span>:myfirst <span class="number">5s</span> linear <span class="number">2s</span> infinite alternate;</div><div class="line">	<span class="comment">/* Safari and Chrome: */</span></div><div class="line">	<span class="attribute">-webkit-animation</span>:myfirst <span class="number">5s</span> linear <span class="number">2s</span> infinite alternate;</div><div class="line">	<span class="comment">/* Opera: */</span></div><div class="line">	<span class="attribute">-o-animation</span>:myfirst <span class="number">5s</span> linear <span class="number">2s</span> infinite alternate;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> myfirst</div><div class="line">&#123;</div><div class="line">	0%   &#123;<span class="attribute">background</span>:red; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</div><div class="line">	25%  &#123;<span class="attribute">background</span>:yellow; <span class="attribute">left</span>:<span class="number">200px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</div><div class="line">	50%  &#123;<span class="attribute">background</span>:blue; <span class="attribute">left</span>:<span class="number">200px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</div><div class="line">	75%  &#123;<span class="attribute">background</span>:green; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</div><div class="line">	100% &#123;<span class="attribute">background</span>:red; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> myfirst /* Firefox */</div><div class="line">&#123;</div><div class="line">	0%   &#123;<span class="attribute">background</span>:red; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</div><div class="line">	25%  &#123;<span class="attribute">background</span>:yellow; <span class="attribute">left</span>:<span class="number">200px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</div><div class="line">	50%  &#123;<span class="attribute">background</span>:blue; <span class="attribute">left</span>:<span class="number">200px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</div><div class="line">	75%  &#123;<span class="attribute">background</span>:green; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</div><div class="line">	100% &#123;<span class="attribute">background</span>:red; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> myfirst /* Safari and Chrome */</div><div class="line">&#123;</div><div class="line">	0%   &#123;<span class="attribute">background</span>:red; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</div><div class="line">	25%  &#123;<span class="attribute">background</span>:yellow; <span class="attribute">left</span>:<span class="number">200px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</div><div class="line">	50%  &#123;<span class="attribute">background</span>:blue; <span class="attribute">left</span>:<span class="number">200px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</div><div class="line">	75%  &#123;<span class="attribute">background</span>:green; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</div><div class="line">	100% &#123;<span class="attribute">background</span>:red; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@-<span class="keyword">o</span>-<span class="keyword">keyframes</span> myfirst /* Opera */</div><div class="line">&#123;</div><div class="line">	0%   &#123;<span class="attribute">background</span>:red; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</div><div class="line">	25%  &#123;<span class="attribute">background</span>:yellow; <span class="attribute">left</span>:<span class="number">200px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</div><div class="line">	50%  &#123;<span class="attribute">background</span>:blue; <span class="attribute">left</span>:<span class="number">200px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</div><div class="line">	75%  &#123;<span class="attribute">background</span>:green; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</div><div class="line">	100% &#123;<span class="attribute">background</span>:red; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><br><br><strong> –&gt; 效果</strong><br>(hexo的渲染又出问题了，本地是显示正常的…因此我只能发个截图了，大家自己操作看效果)<br><img src="http://wx3.sinaimg.cn/mw690/006xRFa6gy1fflft8hxkeg30c90ap0tn.gif" alt=""><br><br><style><br>.test<br>{<br>    width:100px;<br>    height:100px;<br>    background:red;<br>    position:relative;<br>    animation:myfirst 5s linear 2s infinite alternate;<br>    /<em> Firefox: </em>/<br>    -moz-animation:myfirst 5s linear 2s infinite alternate;<br>    /<em> Safari and Chrome: </em>/<br>    -webkit-animation:myfirst 5s linear 2s infinite alternate;<br>    /<em> Opera: </em>/<br>    -o-animation:myfirst 5s linear 2s infinite alternate;<br>}<br><br>@keyframes myfirst<br>{<br>    0%   {background:red; left:0px; top:0px;}<br>    25%  {background:yellow; left:200px; top:0px;}<br>    50%  {background:blue; left:200px; top:200px;}<br>    75%  {background:green; left:0px; top:200px;}<br>    100% {background:red; left:0px; top:0px;}<br>}<br><br>@-moz-keyframes myfirst /<em> Firefox </em>/<br>{<br>    0%   {background:red; left:0px; top:0px;}<br>    25%  {background:yellow; left:200px; top:0px;}<br>    50%  {background:blue; left:200px; top:200px;}<br>    75%  {background:green; left:0px; top:200px;}<br>    100% {background:red; left:0px; top:0px;}<br>}<br><br>@-webkit-keyframes myfirst /<em> Safari and Chrome </em>/<br>{<br>    0%   {background:red; left:0px; top:0px;}<br>    25%  {background:yellow; left:200px; top:0px;}<br>    50%  {background:blue; left:200px; top:200px;}<br>    75%  {background:green; left:0px; top:200px;}<br>    100% {background:red; left:0px; top:0px;}<br>}<br><br>@-o-keyframes myfirst /<em> Opera </em>/<br>{<br>    0%   {background:red; left:0px; top:0px;}<br>    25%  {background:yellow; left:200px; top:0px;}<br>    50%  {background:blue; left:200px; top:200px;}<br>    75%  {background:green; left:0px; top:200px;}<br>    100% {background:red; left:0px; top:0px;}<br>}<br></style><br><br><div class="test"></div>
















]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=30903117&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;


&lt;h1 id=&quot;什么是markdown？&quot;&gt;&lt;a href=&quot;#什么是markdown？&quot; class=&quot;headerlink&quot; title=&quot;什么是markdown？&quot;&gt;&lt;/a&gt;什么是markdown？&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的 HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>转载-JS红宝书·读书笔记(下)</title>
    <link href="http://www.erictxl.cn/2017/05/07/%E8%BD%AC%E8%BD%BD-JS%E7%BA%A2%E5%AE%9D%E4%B9%A6%C2%B7%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%B8%8B/"/>
    <id>http://www.erictxl.cn/2017/05/07/转载-JS红宝书·读书笔记-下/</id>
    <published>2017-05-07T07:15:03.000Z</published>
    <updated>2017-06-20T08:59:32.935Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””</p>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;

    
    </summary>
    
      <category term="front" scheme="http://www.erictxl.cn/categories/front/"/>
    
    
      <category term="前端基础" scheme="http://www.erictxl.cn/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JS高程" scheme="http://www.erictxl.cn/tags/JS%E9%AB%98%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>转载-JS红宝书·读书笔记(上)</title>
    <link href="http://www.erictxl.cn/2017/05/07/%E8%BD%AC%E8%BD%BD-JS%E7%BA%A2%E5%AE%9D%E4%B9%A6%C2%B7%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%B8%8A/"/>
    <id>http://www.erictxl.cn/2017/05/07/转载-JS红宝书·读书笔记-上/</id>
    <published>2017-05-07T07:14:53.000Z</published>
    <updated>2017-06-20T07:31:15.321Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””</p>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;

    
    </summary>
    
      <category term="front" scheme="http://www.erictxl.cn/categories/front/"/>
    
    
      <category term="前端基础" scheme="http://www.erictxl.cn/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JS高程" scheme="http://www.erictxl.cn/tags/JS%E9%AB%98%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习笔记(一)</title>
    <link href="http://www.erictxl.cn/2017/05/07/ES6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>http://www.erictxl.cn/2017/05/07/ES6学习笔记-一/</id>
    <published>2017-05-07T07:13:41.000Z</published>
    <updated>2017-06-20T07:30:49.329Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””</p>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;

    
    </summary>
    
      <category term="front" scheme="http://www.erictxl.cn/categories/front/"/>
    
    
      <category term="前端基础" scheme="http://www.erictxl.cn/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="ES6" scheme="http://www.erictxl.cn/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题个人汇总 - JavaScript篇</title>
    <link href="http://www.erictxl.cn/2017/05/07/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%AA%E4%BA%BA%E6%B1%87%E6%80%BB-JavaScript%E7%AF%87/"/>
    <id>http://www.erictxl.cn/2017/05/07/前端面试题个人汇总-JavaScript篇/</id>
    <published>2017-05-07T02:53:42.000Z</published>
    <updated>2017-06-20T02:51:47.364Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””</p>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端面试题个人汇总 - Css篇</title>
    <link href="http://www.erictxl.cn/2017/05/07/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%AA%E4%BA%BA%E6%B1%87%E6%80%BB-Css%E7%AF%87/"/>
    <id>http://www.erictxl.cn/2017/05/07/前端面试题个人汇总-Css篇/</id>
    <published>2017-05-07T02:53:23.000Z</published>
    <updated>2017-06-20T02:51:47.318Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””</p>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端面试题个人汇总Html篇</title>
    <link href="http://www.erictxl.cn/2017/05/07/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%AA%E4%BA%BA%E6%B1%87%E6%80%BBHtml%E7%AF%87/"/>
    <id>http://www.erictxl.cn/2017/05/07/前端面试题个人汇总Html篇/</id>
    <published>2017-05-07T02:53:10.000Z</published>
    <updated>2017-06-20T02:36:12.661Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””</p>
</blockquote>
<hr>
<blockquote>
<p>注：自己看了很多面试题后整理的，觉得还不错，分享给大家.<br><br>主体部分来自CSDN上这位大牛<code>gyq04551</code>的博客</p>
<ol>
<li>面试题汇总: [<a href="http://blog.csdn.net/gyq04551/article/details/55254408" target="_blank" rel="external">http://blog.csdn.net/gyq04551/article/details/55254408</a>]</li>
<li>web前端经典面试题: [<a href="http://blog.csdn.net/gyq04551/article/details/55254359" target="_blank" rel="external">http://blog.csdn.net/gyq04551/article/details/55254359</a>]</li>
</ol>
<p>ok 开始吧~</p>
</blockquote>
<h1 id="HTML-部分"><a href="#HTML-部分" class="headerlink" title="HTML 部分"></a>HTML 部分</h1><a id="more"></a>
<h4 id="1、你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么"><a href="#1、你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么" class="headerlink" title="1、你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么?"></a>1、你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么?</h4><blockquote>
<ol>
<li>IE: trident内核</li>
<li>Firefox：gecko内核</li>
<li>Safari: webkit内核</li>
<li>Opera: 以前是presto内核，Opera现已改用Google Chrome的Blink内核</li>
<li>Chrome: Blink(基于webkit，Google与Opera Software共同开发)</li>
</ol>
</blockquote>
<p><br></p>
<h3 id="2、每个HTML文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？"><a href="#2、每个HTML文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？" class="headerlink" title="2、每个HTML文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？"></a>2、每个HTML文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？</h3><p>　　<code>&lt;!DOCTYPE&gt;</code> 声明位于文档中的最前面的位置，处于 <code>&lt;html&gt;</code> 标签之前。此标签可告知浏览器文档使用哪种 <code>HTML</code> 或 <code>XHTML</code> 规范。（重点：<code>告诉浏览器按照何种规范解析页面</code>）</p>
<p><br></p>
<h3 id="3、Quirks【扩科斯】模式是什么？它和Standards模式有什么区别"><a href="#3、Quirks【扩科斯】模式是什么？它和Standards模式有什么区别" class="headerlink" title="3、Quirks【扩科斯】模式是什么？它和Standards模式有什么区别"></a>3、Quirks【扩科斯】模式是什么？它和Standards模式有什么区别</h3><blockquote>
<p>从IE6开始，引入了Standards【斯坦尔德是】模式，标准模式中，浏览器尝试给符合标准的文档在规范上的正确处理达到在指定浏览器中的程度。<br>在IE6之前CSS还不够成熟，所以IE5等之前的浏览器对CSS的支持很差， IE6将对CSS提供更好的支持，然而这时的问题就来了，因为有很多页面是基于旧的布局方式写的，而如果IE6 支持CSS则将令这些页面显示不正常，如何在即保证不破坏现有页面，又提供新的渲染机制呢？<br>在写程序时我们也会经常遇到这样的问题。</p>
</blockquote>
<p>　　如何保证原来的接口不变，又提供更强大的功能，尤其是新功能不兼容旧功能时。遇到这种问题时的一个常见做法是</p>
<blockquote>
<p><code>增加参数和分支，即当某个参数为真时，我们就使用新功能，而如果这个参数 不为真时，dd就使用旧功能，这样就能不破坏原有的程序，又提供新功能。</code></p>
</blockquote>
<p>　　IE6也是类似这样做的，它将DTD当成了这个“参数”，因为以前的页面大家都不会去写DTD，所以IE6就假定 如果写了DTD，就意味着这个页面将采用对CSS支持更好的布局，而如果没有，则采用兼容之前的布局方式。<code>这就是Quirks模式（怪癖模式，诡异模式，怪异模式）</code>。</p>
<p>区别：</p>
<blockquote>
<p>总体会有布局、样式解析和脚本执行三个方面的区别。</p>
<ol>
<li>盒模型：<br> 在W3C标准中，如果设置一个元素的宽度和高度，指的是元素内容的宽度和高度，而在Quirks 模式下，IE的宽度和高度还包含了padding和border。</li>
<li>设置行内元素的高宽：<br> 在Standards模式下，给<code>&lt;span&gt;</code>等行内元素设置<code>wdith</code>和<code>height</code>都不会生效，而在quirks模式下，则会生效。</li>
<li>设置百分比的高度：<br> 在standards模式下，一个元素的高度是由其包含的内容来决定的，如果父元素没有设置百分比的高度，子元素设置一个百分比的高度是无效的用<br><code>margin:0 auto</code><br>设置水平居中：使用<code>margin:0 auto</code><br>在standards模式下可以使元素水平居中，但在quirks模式下却会失效。<br>（还有很多，答出什么不重要，关键是看他答出的这些是不是自己经验遇到的，还是说都是看文章看的，甚至完全不知道。）</li>
</ol>
</blockquote>
<p><br></p>
<h3 id="4、div-css的布局较table布局有什么优点？"><a href="#4、div-css的布局较table布局有什么优点？" class="headerlink" title="4、div+css的布局较table布局有什么优点？"></a>4、div+css的布局较table布局有什么优点？</h3><blockquote>
<ol>
<li>改版的时候更方便 只要改css文件。</li>
<li>页面加载速度更快、结构化清晰、页面显示简洁。</li>
<li>表现与结构相分离。</li>
<li>易于优化（seo）搜索引擎更友好，排名更容易靠前。</li>
</ol>
</blockquote>
<h2 id=""><a href="#" class="headerlink" title=""></a><br></h2><h3 id="DIV-CSS和Table补充知识"><a href="#DIV-CSS和Table补充知识" class="headerlink" title="DIV+CSS和Table补充知识"></a><code>DIV+CSS和Table</code>补充知识</h3><p>　　众所周知，这（<code>DIV+CSS和Table</code>）两种语句都经常被开发人员使用了来控制界面显示，但是这两种语法也有很大的不同，下面分别从这两种语句的优缺点进行分析：</p>
<h4 id="制作效率"><a href="#制作效率" class="headerlink" title="制作效率"></a>制作效率</h4><p>　　我想没人反对表格的制作效率要高于Div的效率。很明显Div布局代码全部都要手写。即使你在熟悉代码，也没有 Dreamweaver生成来的快吧！所以Table可以很容易建立起结构化的界面，通过table自身的参数定义，我们能把页面布局很快定义成我们所需要的效果。</p>
<h4 id="浏览器的兼容问题"><a href="#浏览器的兼容问题" class="headerlink" title="浏览器的兼容问题"></a>浏览器的兼容问题</h4><p>　　table和div在兼容问题中，table更具有优势。<br>我们常用的<code>IE6.0，IE7.0火狐Firefox浏览器</code>对div css设置上非常挑剔，往往同一个css在2种浏览器上会有不同的结果，对设计制作人员来说是个可怕的问题。我们不可能对用户的浏览器进行排斥和统一化，因此只有通过在制作的时候调整我们的语法和布局方法。div要求我们严格css支持，而table可以不用考虑这么多。table的严谨在不同浏览器中得到了很好的表现。</p>
<h4 id="扩展性和可读性"><a href="#扩展性和可读性" class="headerlink" title="扩展性和可读性"></a>扩展性和可读性</h4><p>　　Table的扩展性和可读性都是很差的，扩展差表现在维护和修正上面。DIV不用重新设计排版网页，甚至于不用动原网站的任何HTML和程序页面，只需要改动CSS文件就完成了所有改版。而Table则需要一个页面一个页面的更改需要变动的地方。</p>
<blockquote>
<p>可读性table基本上是没有的，谁能从一大堆代码里面看的出哪是标题哪是正文。全部是<code>&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</code>。还一个障碍便是当table容器内内容过多时，使页面的加载时间增加，因为浏览器首先要加载<code>&lt;table&gt;</code> 标签，而在加载到<code>&lt;/table&gt;</code>之前，table里的内容不会显示。</p>
</blockquote>
<h4 id="Table和div布局都有各自的优缺点，"><a href="#Table和div布局都有各自的优缺点，" class="headerlink" title="Table和div布局都有各自的优缺点，"></a>Table和div布局都有各自的优缺点，</h4><h4 id="Div布局的优点："><a href="#Div布局的优点：" class="headerlink" title="Div布局的优点："></a>Div布局的优点：</h4><blockquote>
<ol>
<li>大大缩减页面代码，提高页面浏览速度,缩减带宽成本;</li>
<li>结构清晰，容易被搜索引擎搜索到，天生优化了seo</li>
<li><p>缩短改版时间。只要简单的修改几个CSS文件就可以重新设计一个有成百上千页面的站点。</p>
</li>
<li><p>强大的字体控制和排版能力。CSS控制字体的能力比糟糕的<code>FONT</code>标签好多了，有了CSS，我们不再需要用FONT标签或者透明的<code>1 px GIF</code>图片来控制标题，改变字体颜色，字体样式等等。</p>
</li>
<li>CSS非常容易编写。你可以象写html代码一样轻松地编写CSS。</li>
<li><p>提高易用性。使用CSS可以结构化HTML，例如：<code>&lt;p&gt;</code>标签只用来控制段落，<code>heading</code>标签只用来控制标题，<code>table</code>标签只用来表现格式化的数据等等。你可以增加更多的用户而不需要建立独立的版本。</p>
</li>
<li><p>可以一次设计，随处发布。你的设计不仅仅用于web浏览器，也可以发布在其他设备上，比如PowerPoint。</p>
</li>
<li>更好的控制页面布局。</li>
<li><p>表现和内容相分离。将设计部分剥离出来放在一个独立样式文件中，你可以减少未来网页无效的可能。</p>
</li>
<li><p>更方便搜索引擎的搜索。用只包含结构化内容的HTML代替嵌套的标签，搜索引擎将更有效地搜索到你的内容，并可能给你一个较高的评价(ranking)<br>。</p>
</li>
<li>Table 布局灵活性不大，你只能遵循 <code>table tr td</code> 的格式。而div 你可以 <code>div ul li</code> 也可以 <code>ol li</code> 还可以 <code>ul li</code> ……但标准语法最好有序的写。</li>
<li><p>另外如果你不是<code>javascript</code>的高手，你可以不必去写<code>ID</code>，只用<code>class</code>就可以。当客户端程序员写完程序，需要调整时候，你可以在利用他的<code>ID</code>进行控制。</p>
</li>
<li><p><code>Table</code> 中布局中，垃圾代码会很多，一些修饰的样式及布局的代码混合一起，很不利于直观。而<code>Div</code> 更能体现样式和结构相分离，结构的重构性强。</p>
</li>
<li>在几乎所有的浏览器上都可以使用。</li>
<li><p>以前一些非得通过图片转换实现的功能，现在只要用<code>CSS</code>就可以轻松实现，从而更快地下载页面。</p>
</li>
<li><p>使页面的字体变得更漂亮，更容易编排，使页面真正赏心悦目。</p>
</li>
<li>你可以轻松地控制页面的布局 。</li>
</ol>
</blockquote>
<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>　　对于公司经常制作的中小型企业网站，大家可以先试着用<code>div+table</code>去做，这只是一个过渡期。你会发现这个时期做起来比纯table和纯<code>div+css</code>去做要快很多。两种做法的优缺点都可以很好的互补。熟练后，可以用div去做下。另外w3c之所以推出div+css，其目的就是为了提高执行效率，优化程序，由原有的HTML向XML过度，作为长远的发展.div肯定是胜过table的。</p>
<p><br></p>
<h3 id="5、-img的alt与title有何异同？-strong与em的异同？"><a href="#5、-img的alt与title有何异同？-strong与em的异同？" class="headerlink" title="5、 img的alt与title有何异同？ strong与em的异同？"></a>5、 img的alt与title有何异同？ strong与em的异同？</h3><p>　　<code>a:alt(alt text)</code>:为不能显示图像、窗体或applets的用户代理（UA），<code>alt</code>属性用来指定替换文字。替换文字的语言<code>lang</code>属性指定。(在IE浏览器下会在没有<code>title</code>时把<code>alt</code>当成 <code>tool tip</code>显示)<br>　　<code>title(tool tip)</code>:该属性为设置该属性的元素提供建议性的信息.<br>　　<code>strong</code>:粗体强调标签，强调，表示内容的重要性<br>　　<code>em</code>:斜体强调标签，更强烈强调，表示内容的强调点</p>
<p><br></p>
<h3 id="6、你能描述一下渐进增强和优雅降级之间的不同吗"><a href="#6、你能描述一下渐进增强和优雅降级之间的不同吗" class="headerlink" title="6、你能描述一下渐进增强和优雅降级之间的不同吗?"></a>6、你能描述一下渐进增强和优雅降级之间的不同吗?</h3><p>　　<strong>渐进增强</strong> <code>progressive enhancement</code>：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。<br>　　<strong>优雅降级</strong> <code>graceful degradation</code>：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p>
<blockquote>
<p>区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是<code>从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要</code>。降级（功能衰减）意味着往回看；而渐进增强则<code>意味着朝前看，同时保证其根基处于安全地带</code>。</p>
<ol>
<li><code>优雅降级</code>观点<br><br>　　认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。<br>在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。</li>
<li><code>渐进增强</code>观点<br><br>　　认为应关注于内容本身。内容是我们建立网站的诱因。有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得<code>渐进增强成为一种更为合理的设计范例</code>。这也是它立即被 Yahoo! 所采纳并用以构建其<code>分级式浏览器支持 (Graded Browser Support)</code>策略的原因所在。</li>
</ol>
</blockquote>
<p><br></p>
<h3 id="7、为什么利用多个域名来存储网站资源会更有效？"><a href="#7、为什么利用多个域名来存储网站资源会更有效？" class="headerlink" title="7、为什么利用多个域名来存储网站资源会更有效？"></a>7、为什么利用多个域名来存储网站资源会更有效？</h3><blockquote>
<ol>
<li>CDN缓存更方便</li>
<li>突破浏览器并发限制</li>
<li>节约cookie带宽</li>
<li>节约主域名的连接数，优化页面响应速度</li>
<li>防止不必要的安全问题</li>
</ol>
<p>浏览器的并发请求数目限制是针对同一域名的。<br>意即，同一时间针对同一域名下的请求有一定数量限制。超过限制数目的请求会被阻塞</p>
</blockquote>
<p><br></p>
<h3 id="8、请谈一下你对网页标准和标准制定机构重要性的理解。"><a href="#8、请谈一下你对网页标准和标准制定机构重要性的理解。" class="headerlink" title="8、请谈一下你对网页标准和标准制定机构重要性的理解。"></a>8、请谈一下你对网页标准和标准制定机构重要性的理解。</h3><p>　　网页标准和标准制定机构都是为了能让web发展的更‘健康’，<code>开发者遵循统一的标准，降低开发难度，开发成本，SEO也会更好做</code>，也不会因为滥用代码导致各种BUG、安全问题，<code>最终提高网站易用性</code>。</p>
<p><br></p>
<h3 id="9、请描述一下cookies，sessionStorage和localStorage的区别？"><a href="#9、请描述一下cookies，sessionStorage和localStorage的区别？" class="headerlink" title="9、请描述一下cookies，sessionStorage和localStorage的区别？"></a>9、请描述一下cookies，sessionStorage和localStorage的区别？</h3><p>　　<code>sessionStorage</code>： 用于本地存储一个<code>会话（session）</code>中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。<br>　　<code>localStorage</code>： 用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。<br>　　<code>Cookie</code>： 作用是与服务器进行交互，作为HTTP规范的一部分而存在的大小是受限的，每次你请求一个新的页面的时候Cookie都会被发送过去。这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。</p>
<blockquote>
<p><code>web storage</code>和<code>cookie</code>的区别<br>　　<code>Web Storage</code>的概念和<code>cookie</code>相似，区别是它是为了更大容量存储设计的。<br>除此之外，<code>Web Storage</code>拥有<code>setItem</code>,<code>getItem</code>,<code>removeItem</code>,<code>clear</code>等方法，不像<code>cookie</code>需要前端开发者自己封装<code>setCookie</code>，<code>getCookie</code>。但是<code>Cookie</code>也是不可以或缺的：与服务器进行交互 ，而<code>Web Storage</code>仅仅是为了在本地“存储”数据而生。</p>
</blockquote>
<p><br></p>
<h3 id="10、简述一下src与href的区别。"><a href="#10、简述一下src与href的区别。" class="headerlink" title="10、简述一下src与href的区别。"></a>10、简述一下src与href的区别。</h3><p>　　<code>src</code>用于替换当前元素，<code>href</code>用于在当前文档和引用资源之间确立联系。<br>　　<code>src</code>是<code>source</code>的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> =<span class="string">”js.js”</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>　　当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。</p>
<p>　　<code>href</code>是<code>Hypertext Reference</code>的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，如果我们在文档中添加<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">”common.css”</span> <span class="attr">rel</span>=<span class="string">”stylesheet”/</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>　　那么浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用link方式来加载css，而不是使用@import方式。</p>
<p><br></p>
<h3 id="11、知道的网页制作会用到的图片格式有哪些？"><a href="#11、知道的网页制作会用到的图片格式有哪些？" class="headerlink" title="11、知道的网页制作会用到的图片格式有哪些？"></a>11、知道的网页制作会用到的图片格式有哪些？</h3><p>　　<code>png-8，png-24，jpeg，gif，svg</code><br>　　但是上面的那些都不是面试官想要的最后答案。面试官希望听到是<code>Webp</code>。（是否有关注新技术，新鲜事物）</p>
<blockquote>
<p>科普一下Webp：<br>　　WebP格式，谷歌（google）开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器带宽资源和数据空间。Facebook Ebay等知名网站已经开始测试并使用WebP格式。<br>　　在质量相同的情况下，WebP格式图像的体积要比JPEG格式图像小40%<br>　　美中不足的是，WebP格式图像的编码时间“比JPEG格式图像长8倍”。</p>
</blockquote>
<p><br></p>
<h3 id="12、知道什么是微格式吗？谈谈理解。在前端构建中应该考虑微格式吗？"><a href="#12、知道什么是微格式吗？谈谈理解。在前端构建中应该考虑微格式吗？" class="headerlink" title="12、知道什么是微格式吗？谈谈理解。在前端构建中应该考虑微格式吗？"></a>12、知道什么是微格式吗？谈谈理解。在前端构建中应该考虑微格式吗？</h3><p>　　微格式（Microformats）是一种让机器可读的语义化XHTML词汇的集合，是结构化数据的开放标准。是为特殊应用而制定的特殊格式。<br><br>　　优点：将智能数据添加到网页上，让网站内容在搜索引擎结果界面可以显示额外的提示。（应用范例：豆瓣，有兴趣自行google）</p>
<p><br></p>
<h3 id="13、在css-js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？"><a href="#13、在css-js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？" class="headerlink" title="13、在css/js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？"></a>13、在css/js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？</h3><blockquote>
<p>dns缓存，cdn缓存，浏览器缓存，服务器缓存。</p>
</blockquote>
<p><br></p>
<h3 id="14、一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。"><a href="#14、一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。" class="headerlink" title="14、一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。"></a>14、一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。</h3><p>图片懒加载:　　</p>
<blockquote>
<p><code>在页面上的未可视区域可以添加一个滚动条事件，判断图片位置与浏览器顶端的距离与页面的距离，如果前者小于后者，优先加载</code>。</p>
<ol>
<li><p>如果为幻灯片、相册等，可以使用图片预加载技术，将当前展示图片的前一张和后一张优先下载。<br>如果图片为css图片，可以使用<code>CSSsprite，SVGsprite，Iconfont、Base64</code>等技术。</p>
</li>
<li><p>如果图片过大，可以使用特殊编码的图片，加载时会先加载一张压缩的特别厉害的缩略图，以提高用户体验。</p>
</li>
<li><p>如果图片展示区域小于图片的真实大小，则因在服务器端根据业务需要先行进行图片压缩，图片压缩后大小与展示一致。</p>
</li>
</ol>
</blockquote>
<p><br></p>
<h3 id="15、你如何理解HTML结构的语义化？"><a href="#15、你如何理解HTML结构的语义化？" class="headerlink" title="15、你如何理解HTML结构的语义化？　"></a>15、你如何理解HTML结构的语义化？　</h3><p>　　<strong>去掉或样式丢失的时候能让页面呈现清晰的结构</strong>：<br></p>
<blockquote>
<p>　　html本身是没有表现的，我们看到例如<code>&lt;h1&gt;</code>是粗体，字体大小2em，加粗；<code>&lt;strong&gt;</code>是加粗的，不要认为这是html的表现，这些其实是html默认的css样式在起作用，所以去掉或样式丢失的时候能让页面呈现清晰的结构不是语义化的HTML结构的优点，但是浏览器都有有默认样式，默认样式的目的也是为了更好的表达html的语义，可以说浏览器的默认样式和语义化的HTML结构是不可分割的。</p>
</blockquote>
<ol>
<li>为了在没有CSS的情况下，页面也能呈现出很好地内容结构、代码结构.(<code>为了裸奔时好看</code>)；</li>
<li>用户体验：例如<code>title、alt</code>用于解释名词或解释图片信息、<code>label</code>标签的活用；</li>
<li>有利于SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；</li>
<li>方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页；</li>
<li>便于团队开发和维护，语义化更具可读性，是下一步吧网页的重要动向，遵循W3C标准的团队都遵循这个标准，可以减少差异化。</li>
</ol>
<p><br></p>
<h3 id="16、谈谈以前端角度出发做好SEO需要考虑什么？"><a href="#16、谈谈以前端角度出发做好SEO需要考虑什么？" class="headerlink" title="16、谈谈以前端角度出发做好SEO需要考虑什么？"></a>16、谈谈以前端角度出发做好SEO需要考虑什么？</h3><p>　　了解搜索引擎如何抓取网页和如何索引网页<br>你需要知道一些搜索引擎的基本工作原理，各个搜索引擎之间的区别，搜索机器人（SE robot 或叫 web crawler）如何进行工作，搜索引擎如何对搜索结果进行排序等等。</p>
<ol>
<li><p>Meta标签优化</p>
<blockquote>
<p>　　主要包括主题（<code>Title</code>)，网站描述(<code>Description</code>)，和关键词（<code>Keywords</code>）。还有一些其它的隐藏文字比如<code>Author（作者）</code>，<code>Category（目录）</code>，<code>Language（编码语种）</code>等。<br>如何选取关键词并在网页中放置关键词<br>搜索就得用关键词。关键词分析和选择是SEO最重要的工作之一。首先要给网站确定主关键词（一般在5个上下），然后针对这些关键词进行优化，包括关键词密度（Density），相关度（Relavancy），突出性（Prominency）等等。</p>
</blockquote>
</li>
<li><p>了解主要的搜索引擎</p>
<blockquote>
<p>　　虽然搜索引擎有很多，但是对网站流量起决定作用的就那么几个。比如英文的主要有Google，Yahoo，Bing等；中文的有百度，搜狗，有道等。不同的搜索引擎对页面的抓取和索引、排序的规则都不一样。还要了解各搜索门户和搜索引擎之间的关系，比如AOL网页搜索用的是Google的搜索技术，MSN用的是Bing的技术。</p>
</blockquote>
</li>
<li><p>主要的互联网目录</p>
<blockquote>
<p>　　Open Directory自身不是搜索引擎，而是一个大型的网站目录，他和搜索引擎的主要区别是网站内容的收集方式不同。目录是人工编辑的，主要收录网站主页；搜索引擎是自动收集的，除了主页外还抓取大量的内容页面。</p>
</blockquote>
</li>
<li><p>按点击付费的搜索引擎</p>
<blockquote>
<p>　　搜索引擎也需要生存，随着互联网商务的越来越成熟，收费的搜索引擎也开始大行其道。最典型的有Overture和百度，当然也包括Google的广告项目Google Adwords。越来越多的人通过搜索引擎的点击广告来定位商业网站，这里面也大有优化和排名的学问，你得学会用最少的广告投入获得最多的点击。</p>
</blockquote>
</li>
<li><p>搜索引擎登录</p>
<blockquote>
<p>　　网站做完了以后，别躺在那里等着客人从天而降。要让别人找到你，最简单的办法就是将网站提交（submit）到搜索引擎。如果你的是商业网站，主要的搜索引擎和目录都会要求你付费来获得收录（比如Yahoo要299美元），但是好消息是（至少到目前为止）最大的搜索引擎Google目前还是免费，而且它主宰着60％以上的搜索市场。</p>
</blockquote>
</li>
<li><p>链接交换和链接广泛度（Link Popularity）</p>
<blockquote>
<p>　　网页内容都是以超文本（Hypertext）的方式来互相链接的，网站之间也是如此。除了搜索引擎以外，人们也每天通过不同网站之间的链接来Surfing（“冲浪”）。其它网站到你的网站的链接越多，你也就会获得更多的访问量。更重要的是，你的网站的外部链接数越多，会被搜索引擎认为它的重要性越大，从而给你更高的排名。</p>
</blockquote>
</li>
<li><p>合理的标签使用</p>
</li>
</ol>
<p><br></p>
<h3 id="17、有哪项方式可以对一个DOM设置它的CSS样式？"><a href="#17、有哪项方式可以对一个DOM设置它的CSS样式？" class="headerlink" title="17、有哪项方式可以对一个DOM设置它的CSS样式？　"></a>17、有哪项方式可以对一个DOM设置它的CSS样式？　</h3><ol>
<li>外部样式表，引入一个外部css文件</li>
<li>内部样式表，将css代码放在 <code>&lt;head&gt;</code> 标签内部</li>
<li>内联样式，将css样式直接定义在 <code>HTML</code> 元素内部</li>
</ol>
<p><br></p>
<h3 id="18、CSS都有哪些选择器？"><a href="#18、CSS都有哪些选择器？" class="headerlink" title="18、CSS都有哪些选择器？"></a>18、CSS都有哪些选择器？</h3><blockquote>
<ol>
<li>派生选择器（用HTML标签申明）</li>
<li>id选择器（用DOM的ID申明）</li>
<li>类选择器（用一个样式类名申明）</li>
<li>属性选择器（用DOM的属性申明，属于CSS2，IE6不支持）<br><br>除了前3种基本选择器，还有一些扩展选择器，包括</li>
<li>后代选择器（利用空格间隔，比如div .a{  }）</li>
<li>群组选择器（利用逗号间隔，比如p,div,#a{  }）</li>
</ol>
</blockquote>
<p>那么问题来了，CSS选择器的优先级是怎么样定义的？</p>
<blockquote>
<p>基本原则：<br><code>一般而言，选择器越特殊，它的优先级越高。也就是选择器指向的越准确，它的优先级就越高。</code><br><strong>简单的计算方法：</strong><br></p>
<blockquote>
<p>用<code>1</code>表示<code>派生选择器</code>的优先级<br>用<code>10</code>表示<code>类选择器</code>的优先级<br>用<code>100</code>标示<code>ID选择器</code>的优先级</p>
</blockquote>
</blockquote>
<p><code>div.test1 .span var</code> 优先级 <code>1+10 +10 +1</code><br><code>span#xxx .songs li</code> 优先级<code>1+100 + 10 + 1</code><br><code>#xxx li</code> 优先级 <code>100 +1</code></p>
<p>那么问题来了，看下列代码，<code>&lt;p&gt;</code>标签内的文字是什么颜色的？<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">.classA&#123; color:blue;&#125;</div><div class="line">.classB&#123; color:red;&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;p class='classB classA'&gt;123 &lt;/p&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure></p>
<p>答案：red。与样式定义在文件中的先后顺序有关，即是后面的覆盖前面的，与在<code>&lt;p class=’classB classA’&gt;</code>中的先后关系无关。</p>
<p><br></p>
<h3 id="19、CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？"><a href="#19、CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？" class="headerlink" title="19、CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？"></a>19、CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？</h3><p>最基本的：<br><code>设置display属性为none，或者设置visibility属性为hidden</code><br>技巧性：<br>设置宽高为0，<code>设置透明度为0，设置z-index位置在-1000</code></p>
<p><br></p>
<h3 id="20、超链接访问过后hover样式就不出现的问题是什么？如何解决？"><a href="#20、超链接访问过后hover样式就不出现的问题是什么？如何解决？" class="headerlink" title="20、超链接访问过后hover样式就不出现的问题是什么？如何解决？"></a>20、超链接访问过后hover样式就不出现的问题是什么？如何解决？</h3><p>　　被点击访问过的超链接样式不在具有hover和active了,解决方法是改变CSS属性的排列顺序:<br> L-V-H-A（<code>link,visited,hover,active</code>）</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;注：自己看了很多面试题后整理的，觉得还不错，分享给大家.&lt;br&gt;&lt;br&gt;主体部分来自CSDN上这位大牛&lt;code&gt;gyq04551&lt;/code&gt;的博客&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;面试题汇总: [&lt;a href=&quot;http://blog.csdn.net/gyq04551/article/details/55254408&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/gyq04551/article/details/55254408&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;web前端经典面试题: [&lt;a href=&quot;http://blog.csdn.net/gyq04551/article/details/55254359&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/gyq04551/article/details/55254359&lt;/a&gt;]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ok 开始吧~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;HTML-部分&quot;&gt;&lt;a href=&quot;#HTML-部分&quot; class=&quot;headerlink&quot; title=&quot;HTML 部分&quot;&gt;&lt;/a&gt;HTML 部分&lt;/h1&gt;
    
    </summary>
    
      <category term="experience" scheme="http://www.erictxl.cn/categories/experience/"/>
    
    
      <category term="Html" scheme="http://www.erictxl.cn/tags/Html/"/>
    
      <category term="前端面试" scheme="http://www.erictxl.cn/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>每日随笔</title>
    <link href="http://www.erictxl.cn/2017/05/01/%E6%AF%8F%E6%97%A5%E9%9A%8F%E7%AC%94/"/>
    <id>http://www.erictxl.cn/2017/05/01/每日随笔/</id>
    <published>2017-05-01T02:00:40.000Z</published>
    <updated>2017-06-20T07:26:51.357Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””</p>
</blockquote>
<hr>
<h1 id="用博客，记录下我灵光乍现的感想"><a href="#用博客，记录下我灵光乍现的感想" class="headerlink" title="用博客，记录下我灵光乍现的感想"></a>用博客，记录下我灵光乍现的感想</h1><blockquote>
<p>最新的，永远会在第一条~(使用withme日记本记录一些灵感，然后整理到博客上)</p>
</blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28427733&auto=0&height=66"></iframe>

<h2 id="2017-6-20"><a href="#2017-6-20" class="headerlink" title="2017-6-20"></a>2017-6-20</h2><blockquote>
<p>不勇敢，你什么都得不到。</p>
<p>不要总是去想象时间能倒退该有多好，那不可能，如果你不做出改变，那么，你就永远会处于劣势</p>
<p>当你遭遇失败，沮丧的时候，当你遭遇人生黑暗的阶段，当你被各种负面情绪所包围的时候，去太阳底下晒一晒，睡一觉吧，阳光会给你希望</p>
</blockquote>
<h2 id="2017-6-19"><a href="#2017-6-19" class="headerlink" title="2017-6-19"></a>2017-6-19</h2><blockquote>
<p>永远不要等你准备好了再去做一件事，那样黄花菜都凉了，而且，你永远都不可能完全准备好，在实践中查缺补漏！在实践中进步！</p>
<p>永远都不要放弃！<br><a id="more"></a></p>
</blockquote>
<h2 id="2017-6-18"><a href="#2017-6-18" class="headerlink" title="2017-6-18"></a>2017-6-18</h2><blockquote>
<p>人怎么可能什么都知道，重要的不是他知道多少，而是他的潜力，解决问题的能力与探索的欲望</p>
<p>会淹死的都是半吊子，实力强的根本无需担心</p>
</blockquote>
<h2 id="2017-6-16"><a href="#2017-6-16" class="headerlink" title="2017-6-16"></a>2017-6-16</h2><blockquote>
<p>对自己的能力和定位要有一个清楚的认识</p>
<p>只想着用玩的心态去做事，是成功不了的</p>
</blockquote>
<h2 id="2017-6-13"><a href="#2017-6-13" class="headerlink" title="2017-6-13"></a>2017-6-13</h2><blockquote>
<p>不要把时间浪费在无意义的事情上</p>
<p>不会的东西赶紧去学，去</p>
</blockquote>
<h2 id="2017-6-10"><a href="#2017-6-10" class="headerlink" title="2017-6-10"></a>2017-6-10</h2><blockquote>
<p>有趣的灵魂</p>
<p>装在手机里电脑里的始终是别人的，装进头脑里的才是自己的！</p>
</blockquote>
<h2 id="2017-6-9"><a href="#2017-6-9" class="headerlink" title="2017-6-9"></a>2017-6-9</h2><blockquote>
<p>不要一直停留在语法层面上，要知道原理和本质</p>
</blockquote>
<h2 id="2017-6-6"><a href="#2017-6-6" class="headerlink" title="2017-6-6"></a>2017-6-6</h2><blockquote>
<p>在父母面前，自己应该永远表现得像个孩子。</p>
<p>我要创造奇迹！</p>
</blockquote>
<h2 id="2017-6-4"><a href="#2017-6-4" class="headerlink" title="2017-6-4"></a>2017-6-4</h2><blockquote>
<p>实践再次证明，熬夜就是傻逼，效率超低，而且伤身体</p>
<p>唱歌和跑步可以缓解压力和紧张</p>
</blockquote>
<h2 id="2017-6-3"><a href="#2017-6-3" class="headerlink" title="2017-6-3"></a>2017-6-3</h2><blockquote>
<p>做最真实的你，才能自由自在，掩饰的东西，一旦被揭露，将成为一场巨大的灾难</p>
<p>只是靠努力的话是远远不够的，因为你的对手也在努力，这是最基本的，还有比眼界，比气势，比能力，比合作……</p>
</blockquote>
<h2 id="2017-6-1"><a href="#2017-6-1" class="headerlink" title="2017-6-1"></a>2017-6-1</h2><blockquote>
<p>越是简单的事情，越敷衍，它所耗费的时间也就越长，认真对待，思考，才能快速地解决</p>
<p>在不同的地方，做不同的事，在图书馆就去应该好好学习，在宿舍就应该好好放松，两个混杂了，你是做不成事的</p>
</blockquote>
<h2 id="2017-5-29"><a href="#2017-5-29" class="headerlink" title="2017-5-29"></a>2017-5-29</h2><blockquote>
<p>不要为了写博客而写博客，把你学到的写出来，就好</p>
</blockquote>
<h2 id="2017-5-27"><a href="#2017-5-27" class="headerlink" title="2017-5-27"></a>2017-5-27</h2><blockquote>
<p>想遇见更好的人，你就必须先努力变得优秀，然后再变得更优秀</p>
<p>考验自己吧！成长吧！</p>
</blockquote>
<h2 id="2017-5-25"><a href="#2017-5-25" class="headerlink" title="2017-5-25"></a>2017-5-25</h2><blockquote>
<p>怎样才能帮助记忆，一味地重复复习是不行的，需要构建知识架构，即脑图， 根据节点来记忆是效果最好的</p>
<p>面试时如果你觉得面试官问的太简单了，那么你就应该自主的往深入扩展，如果你也简单答的话，那么你绝对过不了</p>
</blockquote>
<h2 id="2017-5-24"><a href="#2017-5-24" class="headerlink" title="2017-5-24"></a>2017-5-24</h2><blockquote>
<p>相信自己，不要那么悲观，给自己信心，赢了就好，输了也无所谓，大不了再试一次</p>
<p>优秀的人，周围的人会让他更优秀，而弱小的人，没有人会去关心。这就是所谓的强者越强，弱者越弱的道理</p>
</blockquote>
<h2 id="2017-5-23"><a href="#2017-5-23" class="headerlink" title="2017-5-23"></a>2017-5-23</h2><blockquote>
<p>认真对待你面对的问题与挑战，不能放弃，也不要急躁</p>
<p>不要走路玩手机，不要睡前看笔记，不要熬夜，这样的效率太低了，要学会调整自己的状态，在干劲满满的时候努力工作，走路，睡前就放松一下头脑，思考一些问题，唱唱歌，聊聊天，什么时候做什么事，让自己劳逸结合，始终处于最好的状态</p>
</blockquote>
<h2 id="2017-5-22"><a href="#2017-5-22" class="headerlink" title="2017-5-22"></a>2017-5-22</h2><blockquote>
<p>率直，想要什么就说出来</p>
</blockquote>
<h2 id="2017-5-20"><a href="#2017-5-20" class="headerlink" title="2017-5-20"></a>2017-5-20</h2><blockquote>
<p>不会的赶紧学，不会的赶紧补，要相信自己的能力和头脑，你可以在短时间内搞定的！</p>
<p>学习 记忆新知识采用问答法，学完之后问自己会了什么，自己提问题，自己组织答案</p>
</blockquote>
<h2 id="2017-5-19"><a href="#2017-5-19" class="headerlink" title="2017-5-19"></a>2017-5-19</h2><blockquote>
<p>事情要一件一件做，同时做两件事都做不好</p>
</blockquote>
<h2 id="2017-5-16"><a href="#2017-5-16" class="headerlink" title="2017-5-16"></a>2017-5-16</h2><blockquote>
<p>开心的人在开心，而我在孤独地探索</p>
<p>跑步可以减压</p>
</blockquote>
<h2 id="2017-5-15"><a href="#2017-5-15" class="headerlink" title="2017-5-15"></a>2017-5-15</h2><blockquote>
<p>我的进化之路</p>
<p>每天空闲时间把你当天以及之前学到的咀嚼一下，加强理解，不能只靠死记，要理解！理解！理解！</p>
<p>从今天开始，重新做人，变成你理想中的自己</p>
</blockquote>
<h2 id="2017-5-13"><a href="#2017-5-13" class="headerlink" title="2017-5-13"></a>2017-5-13</h2><blockquote>
<p>你需要知道你想要做什么，想去哪里，并做好准备，付出努力</p>
<p>有针对性的做事情，学会抓重点，找机会！</p>
</blockquote>
<h2 id="2017-5-11"><a href="#2017-5-11" class="headerlink" title="2017-5-11"></a>2017-5-11</h2><blockquote>
<p>理解至上，背诵来的东西是靠不住的</p>
</blockquote>
<h2 id="2017-5-10"><a href="#2017-5-10" class="headerlink" title="2017-5-10"></a>2017-5-10</h2><blockquote>
<p>要知道自己想要什么，不要做浪费时间的事啊！</p>
<p>向大神看齐，多关注你前进的领域的最新情况，情报很重要！很多时候能决定一次征途的成败</p>
</blockquote>
<h2 id="2017-5-9"><a href="#2017-5-9" class="headerlink" title="2017-5-9"></a>2017-5-9</h2><blockquote>
<p>失败固然可怕，可是更可怕的是失败之后一蹶不振，完全不思考为什么失败，不去查缺补漏，不去及时修补自己的不足</p>
<p>实力是硬伤，实力不行，有机会也抓不住，赶紧增强实力！</p>
</blockquote>
<h2 id="2017-5-8"><a href="#2017-5-8" class="headerlink" title="2017-5-8"></a>2017-5-8</h2><blockquote>
<p>与其低效率地连续工作，还不如高效率地短期工作，要学会调整自己的状态。</p>
<p>无论做什么，认真地思考会得到更多的东西。</p>
</blockquote>
<h2 id="2017-5-7"><a href="#2017-5-7" class="headerlink" title="2017-5-7"></a>2017-5-7</h2><blockquote>
<p>世界上绝大多数的失败，都是源于自己的不努力</p>
<p>自己手机的东西，要赶紧学到手啊，放在仓库里的东西，永远不是你的东西，装进头脑里的才是。</p>
</blockquote>
<h2 id="2017-5-6"><a href="#2017-5-6" class="headerlink" title="2017-5-6"></a>2017-5-6</h2><blockquote>
<p>善待别人，也要善待自己</p>
<p>不要忘了你的梦想！</p>
</blockquote>
<h2 id="2017-5-5"><a href="#2017-5-5" class="headerlink" title="2017-5-5"></a>2017-5-5</h2><blockquote>
<p>刻意的去记一些东西，每天坚持锻炼自己的记忆力~</p>
<p>机会有很多，然而，它只青睐有实力的人</p>
</blockquote>
<h2 id="2017-5-4"><a href="#2017-5-4" class="headerlink" title="2017-5-4"></a>2017-5-4</h2><blockquote>
<p>不要忘了自己的梦想！</p>
<p>机会有很多，然而它只青睐有实力的人。</p>
<p>多懂一些东西，多会一些技能，绝对会有好处的，在一些紧急关头会发挥意想不到的作用。这个世界，需要的是全面的人，专精虽好，可是有点狭隘了。</p>
</blockquote>
<h2 id="2017-5-3"><a href="#2017-5-3" class="headerlink" title="2017-5-3"></a>2017-5-3</h2><blockquote>
<p>如果有人觉得你是SB，那么不管你做什么，如何证明自己，他都会觉得你是SB，所以，直接无视就行，我们不需要去讨好那些讨厌我们的人，没有意义。做好自己，过得开心，做你想做的事，和你想说的人说话，好好度过每一天，毕竟时间那么宝贵，过得不开心就可惜了~ (^し^)</p>
</blockquote>
<h2 id="2017-5-2"><a href="#2017-5-2" class="headerlink" title="2017-5-2"></a>2017-5-2</h2><blockquote>
<p>刻意地去记忆一些东西，随时随地锻炼自己的记忆力。</p>
<p>如果你的作品都震撼不到自己，又谈何震撼到别人？</p>
</blockquote>
<h2 id="2017-5-1"><a href="#2017-5-1" class="headerlink" title="2017-5-1"></a>2017-5-1</h2><blockquote>
<p>专注的秘密就是不停的思考你正在做的事情，想着怎么做好它，想着想着自然而然就变得专注了。   —栋栋</p>
<p>情报很重要！！！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;用博客，记录下我灵光乍现的感想&quot;&gt;&lt;a href=&quot;#用博客，记录下我灵光乍现的感想&quot; class=&quot;headerlink&quot; title=&quot;用博客，记录下我灵光乍现的感想&quot;&gt;&lt;/a&gt;用博客，记录下我灵光乍现的感想&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;最新的，永远会在第一条~(使用withme日记本记录一些灵感，然后整理到博客上)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=28427733&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;2017-6-20&quot;&gt;&lt;a href=&quot;#2017-6-20&quot; class=&quot;headerlink&quot; title=&quot;2017-6-20&quot;&gt;&lt;/a&gt;2017-6-20&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;不勇敢，你什么都得不到。&lt;/p&gt;
&lt;p&gt;不要总是去想象时间能倒退该有多好，那不可能，如果你不做出改变，那么，你就永远会处于劣势&lt;/p&gt;
&lt;p&gt;当你遭遇失败，沮丧的时候，当你遭遇人生黑暗的阶段，当你被各种负面情绪所包围的时候，去太阳底下晒一晒，睡一觉吧，阳光会给你希望&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2017-6-19&quot;&gt;&lt;a href=&quot;#2017-6-19&quot; class=&quot;headerlink&quot; title=&quot;2017-6-19&quot;&gt;&lt;/a&gt;2017-6-19&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;永远不要等你准备好了再去做一件事，那样黄花菜都凉了，而且，你永远都不可能完全准备好，在实践中查缺补漏！在实践中进步！&lt;/p&gt;
&lt;p&gt;永远都不要放弃！&lt;br&gt;
    
    </summary>
    
      <category term="life" scheme="http://www.erictxl.cn/categories/life/"/>
    
    
      <category term="每日更新" scheme="http://www.erictxl.cn/tags/%E6%AF%8F%E6%97%A5%E6%9B%B4%E6%96%B0/"/>
    
      <category term="感想" scheme="http://www.erictxl.cn/tags/%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>数据结构重点复习</title>
    <link href="http://www.erictxl.cn/2017/04/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%87%8D%E7%82%B9%E5%A4%8D%E4%B9%A0/"/>
    <id>http://www.erictxl.cn/2017/04/21/数据结构重点复习/</id>
    <published>2017-04-21T07:06:24.000Z</published>
    <updated>2017-06-20T02:51:47.372Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””</p>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      数据结构该捡起来了，
    
    </summary>
    
      <category term="study" scheme="http://www.erictxl.cn/categories/study/"/>
    
    
      <category term="复习重点" scheme="http://www.erictxl.cn/tags/%E5%A4%8D%E4%B9%A0%E9%87%8D%E7%82%B9/"/>
    
      <category term="数据结构" scheme="http://www.erictxl.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>八大排序算法 --- 理解+复习</title>
    <link href="http://www.erictxl.cn/2017/04/21/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E7%90%86%E8%A7%A3-%E5%A4%8D%E4%B9%A0/"/>
    <id>http://www.erictxl.cn/2017/04/21/八大排序算法-理解-复习/</id>
    <published>2017-04-21T07:05:47.000Z</published>
    <updated>2017-06-20T02:33:58.059Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””</p>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      八大排序，必须要熟练！
    
    </summary>
    
      <category term="study" scheme="http://www.erictxl.cn/categories/study/"/>
    
    
      <category term="排序" scheme="http://www.erictxl.cn/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="复习重点" scheme="http://www.erictxl.cn/tags/%E5%A4%8D%E4%B9%A0%E9%87%8D%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>多说关闭了，该选择哪种第三方评论呢？</title>
    <link href="http://www.erictxl.cn/2017/04/21/%E5%A4%9A%E8%AF%B4%E5%85%B3%E9%97%AD%E4%BA%86%EF%BC%8C%E8%AF%A5%E9%80%89%E6%8B%A9%E5%93%AA%E7%A7%8D%E7%AC%AC%E4%B8%89%E6%96%B9%E8%AF%84%E8%AE%BA%E5%91%A2%EF%BC%9F/"/>
    <id>http://www.erictxl.cn/2017/04/21/多说关闭了，该选择哪种第三方评论呢？/</id>
    <published>2017-04-21T02:39:45.000Z</published>
    <updated>2017-06-20T02:39:16.964Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””</p>
</blockquote>
<hr>
<h1 id="多说要关闭了，感觉还是蛮遗憾的"><a href="#多说要关闭了，感觉还是蛮遗憾的" class="headerlink" title="多说要关闭了，感觉还是蛮遗憾的"></a>多说要关闭了，感觉还是蛮遗憾的</h1><p>多说可以说是国内首屈一指的博客评论系统了，我在用WordPress写博客时就是用的它，与Disqus相比，对国内用户要友好很多</p>
<blockquote>
<p>(Disqus需要翻墙才能使用，作为一枚程序猿，当然得会翻墙啦o(´^｀)o但是我不能保证想要评论我的博客的人也都能翻墙，所以还是暂时不用它了。不过，它的好处也有很多，<code>本身就是专业做评论系统的，功能齐全，支持 ssl，响应化设计，界面美观。</code>)</p>
</blockquote>
<p>好了，接下来进入正题，选哪种比较好呢？我是个颜控(✪ω✪)所以评论系统的颜值很重要，功能也得强大一点，这里有两款我比较喜欢，一个是来自韩国的评论系统 –<code>来必力</code>，另一个就是国内的<code>友言</code>。<br><a id="more"></a><br>提供一个大佬对各种评论系统的详细介绍 —&gt; <a href="https://blog.shuiba.co/comment-systems-recommendation" target="_blank" rel="external">第三方评论系统推荐 Bitcron 笔记</a></p>
<h2 id="友言"><a href="#友言" class="headerlink" title="友言"></a>友言</h2><p>首先肯定是先介绍国内的友言，这里提供它的官网地址   <a href="http://www.uyan.cc/" target="_blank" rel="external">友言：一个专业的网站社交评论系统</a></p>
<center><img src="http://wx4.sinaimg.cn/mw690/006xRFa6gy1feu60u53taj311g0gidtv.jpg" alt=""></center><br>直接选择获取代码，手机端，PC端代码都是一样的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- UY BEGIN --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"uyan_frame"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://v2.uyan.cc/code/uyan.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- UY END --&gt;</span></div></pre></td></tr></table></figure><br><br>有的主题内部有友言的选项，直接设置其为<code>true</code>就行,我使用的yilia主题没有，所以就得自己添加了，配置很简单，进入<code>themes\yilia\layout\_partial文件夹下的article.ejs</code>文件里加入如下代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">index</span> &amp;&amp; <span class="attr">post.comments</span> &amp;&amp; <span class="attr">theme.youyan</span>==<span class="string">true)&#123;</span> %&gt;</span></div><div class="line"><span class="comment">&lt;!-- UY BEGIN --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"uyan_frame"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://v2.uyan.cc/code/uyan.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- UY END --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure><br><br>然后在主题里的_config.yml里加上<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">youyan:</span> <span class="literal">true</span></div></pre></td></tr></table></figure><br><br>一切就都OK了，评论样式如下：<br><center><img src="http://wx4.sinaimg.cn/mw690/006xRFa6gy1feu60v5tsmj30kp0dt0tb.jpg" alt=""></center><br>是不是感觉似曾相识？没错，这可能是最像多说的评论系统。有评论统计、最新评论插件可以使用。有加网的分享按钮（Share this），友荐的猜你喜欢（Related posts），加上友言的评论系统，博客三件套齐活儿了。支持 QQ、新浪微博、人人、开心网账号登陆。界面很像 Disqus。<br><br>## 来必力<br>这里也提供它的官网地址   <a href="https://livere.com/" target="_blank" rel="external">欢迎来到来必力</a><br><center><img src="http://wx4.sinaimg.cn/mw690/006xRFa6gy1feu60uq8ozj311g0fvgy0.jpg" alt=""></center><br>先来看一看它的颜值(✪ω✪)可以提供10几种的登录方式，包括微信！可以发图片(可是不能发表情，这个稍微有点尴尬，希望官方日后能够添加这一功能)<br><center><img src="http://wx1.sinaimg.cn/mw690/006xRFa6gy1feu60ta4lbj30ry0dpmxm.jpg" alt=""></center>

<p>yilia主题依然没有配置来必力的选项，那么，我们来自己配</p>
<blockquote>
<ol>
<li>首先，去官网注册，应该不需要翻墙，应该…注册成功之后，选择City的免费版，安装，付费版有更多的功能，自己抉择~，<br>然后就会出现获取代码，data-uid 这个值非常重要<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 来必力City版安装代码 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"lv-container"</span> <span class="attr">data-id</span>=<span class="string">"city"</span> <span class="attr">data-uid</span>=<span class="string">"你的特殊码"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">   (<span class="function"><span class="keyword">function</span>(<span class="params">d, s</span>) </span>&#123;</div><div class="line">       <span class="keyword">var</span> j, e = d.getElementsByTagName(s)[<span class="number">0</span>];</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (<span class="keyword">typeof</span> LivereTower === <span class="string">'function'</span>) &#123; <span class="keyword">return</span>; &#125;</div><div class="line"></div><div class="line">       j = d.createElement(s);</div><div class="line">       j.src = <span class="string">'https://cdn-city.livere.com/js/embed.dist.js'</span>;</div><div class="line">       j.async = <span class="literal">true</span>;</div><div class="line"></div><div class="line">       e.parentNode.insertBefore(j, e);</div><div class="line">   &#125;)(<span class="built_in">document</span>, <span class="string">'script'</span>);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span> 为正常使用来必力评论功能请激活JavaScript<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- City版安装代码已完成 --&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>然后这是我的管理界面，可以很方便地改主题，管理评论</p>
<center><img src="http://wx2.sinaimg.cn/mw690/006xRFa6gy1feu6jzxe2nj30op0hsdhb.jpg" alt=""></center>

<p>下面就是具体的配置过程,同样的，进入<code>themes\yilia\layout\_partial文件夹下的article.ejs</code>文件，然后添加<br><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> <span class="keyword">if</span> (!<span class="keyword">index</span> &amp;&amp; post.comments &amp;&amp; theme.livere_uid)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"lv-container"</span> <span class="attr">data-id</span>=<span class="string">"city"</span> <span class="attr">data-uid</span>=<span class="string">"&lt;%=</span></span><span class="perl">theme.livere_uid</span><span class="xml"><span class="tag"><span class="string">%&gt;"</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            (<span class="function"><span class="keyword">function</span>(<span class="params">d, s</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> j, e = d.getElementsByTagName(s)[<span class="number">0</span>];</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> LivereTower === <span class="string">'function'</span>) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                j = d.createElement(s);</div><div class="line">                j.src = <span class="string">'https://cdn-city.livere.com/js/embed.dist.js'</span>;</div><div class="line">                j.async = <span class="literal">true</span>;</div><div class="line"></div><div class="line">                e.parentNode.insertBefore(j, e);</div><div class="line">            &#125;)(<span class="built_in">document</span>, <span class="string">'script'</span>);</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">noscript</span>&gt;</span> 为正常使用来必力评论功能请激活JavaScript<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span></span><span class="perl"> &#125; </span><span class="xml"><span class="tag">%&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>然后在主题里的_config.yml里加上<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">livere_uid:</span> 你的特殊码</div></pre></td></tr></table></figure></p>
</blockquote>
<p>接下来就欢快地使用这两个颜值比较高的评论系统吧~[]~(￣▽￣)~*</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;多说要关闭了，感觉还是蛮遗憾的&quot;&gt;&lt;a href=&quot;#多说要关闭了，感觉还是蛮遗憾的&quot; class=&quot;headerlink&quot; title=&quot;多说要关闭了，感觉还是蛮遗憾的&quot;&gt;&lt;/a&gt;多说要关闭了，感觉还是蛮遗憾的&lt;/h1&gt;&lt;p&gt;多说可以说是国内首屈一指的博客评论系统了，我在用WordPress写博客时就是用的它，与Disqus相比，对国内用户要友好很多&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(Disqus需要翻墙才能使用，作为一枚程序猿，当然得会翻墙啦o(´^｀)o但是我不能保证想要评论我的博客的人也都能翻墙，所以还是暂时不用它了。不过，它的好处也有很多，&lt;code&gt;本身就是专业做评论系统的，功能齐全，支持 ssl，响应化设计，界面美观。&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好了，接下来进入正题，选哪种比较好呢？我是个颜控(✪ω✪)所以评论系统的颜值很重要，功能也得强大一点，这里有两款我比较喜欢，一个是来自韩国的评论系统 –&lt;code&gt;来必力&lt;/code&gt;，另一个就是国内的&lt;code&gt;友言&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="experience" scheme="http://www.erictxl.cn/categories/experience/"/>
    
    
      <category term="多说" scheme="http://www.erictxl.cn/tags/%E5%A4%9A%E8%AF%B4/"/>
    
      <category term="第三方评论" scheme="http://www.erictxl.cn/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E8%AF%84%E8%AE%BA/"/>
    
      <category term="来必力" scheme="http://www.erictxl.cn/tags/%E6%9D%A5%E5%BF%85%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>所有的悔恨,都源于弱小</title>
    <link href="http://www.erictxl.cn/2017/04/20/%E6%89%80%E6%9C%89%E7%9A%84%E6%82%94%E6%81%A8-%E9%83%BD%E6%BA%90%E4%BA%8E%E5%BC%B1%E5%B0%8F/"/>
    <id>http://www.erictxl.cn/2017/04/20/所有的悔恨-都源于弱小/</id>
    <published>2017-04-20T15:45:37.000Z</published>
    <updated>2017-06-20T02:50:55.804Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””</p>
</blockquote>
<hr>
<p>　　记得是哪部动漫里有句很中二的话：<code>弱小本身就是一种罪，弱小的人，连自己的死法都无从选择。我现在就深有体会。</code></p>
<p>　　现在大三下，从3月份开始，就准备找实习了，Web前端开发，投了很多简历，做了很多笔试，可是，就只有腾讯的过了，也许是运气吧　(　当时一看，大部分都是C++的题目，本来感觉要GG的，没想到过了，但是，其他的都挂了…(ಥ_ಥ)　 )<a id="more"></a></p>
<blockquote>
<p>　　一面，问的不是很细，我也发挥出来超常的水平，跟面试官还蛮聊得来，一共40多分钟，有10几分钟是在聊天(^し^)，那是我第一次面试，总体来说真的是超常发挥了，面完后就回去等状态，等了一天，一直没结果，第三天早上，我醒来就看了一下状态，直接喊了一句：<code>卧槽∑(っ°Д°;)っ，我到复试了!!!</code></p>
<p>　　当时真的是特别激动，然后卯足劲儿复习。</p>
<p>　　二面，面我的应该是技术主管吧，打断了我的自我介绍，就开始问项目，这方面我说的还不错，可是，算法方面我答的太差了，之前跟没有好好复习算法，问到快排，完全二叉树，都被问倒了，而这些本来应该是大二的时候就掌握好的，面试官没有问到数据库和操作系统的知识，要不然我会更加凌乱．．．</p>
<p>　　二面就挂在了这儿。腾讯梦结束</p>
</blockquote>
<p>　　自从腾讯面完之后，我整个人都好像被抽空了一样，复习也打不起精神，一直在做一些无关紧要的事情：</p>
<blockquote>
<p>比如搭这个博客，说实话半天足矣，我弄好之后，选主题，换主题，弄了半天，多说评论要下架了，选第三方评论，配置花了半天，各种不专心，弄了好久，时间花了那么多，学到的东西没多少，效率太低了。</p>
</blockquote>
<p>　　也许是在逃避了，因为突然发现，自己好弱，好后悔之前没有好好努力, 所有的悔恨，都源于弱小。现在回想起来，为什么动漫里的主角能当主角呢？外表只是一个很小的方面，更主要的是主角们的实力，一个好的性格，加上强劲的实力，自然而然就会有伙伴，就会不断地进步。</p>
<p>　　所以，如果你不想被别人支配你的人生，如果你想变得更强，那么，<font color="red" size="5">——就快给我滚去学习啊！！！</font></p>
<blockquote>
<p>每天早上早起一个小时，学习的时候就好好学习，娱乐的时候就好好娱乐，各方面都得提高效率，动漫养肥了再看，这样既节约时间，又看的舒服……</p>
</blockquote>
<p>总之，时间不多了，好好努力，为秋招做准备！</p>
]]></content>
    
    <summary type="html">
    
      今天的一点感想,有点后悔之前没好好认真努力了...
    
    </summary>
    
      <category term="life" scheme="http://www.erictxl.cn/categories/life/"/>
    
    
      <category term="随感" scheme="http://www.erictxl.cn/tags/%E9%9A%8F%E6%84%9F/"/>
    
      <category term="还来得及" scheme="http://www.erictxl.cn/tags/%E8%BF%98%E6%9D%A5%E5%BE%97%E5%8F%8A/"/>
    
  </entry>
  
  <entry>
    <title>使用github + hexo 搭建完全免费、实用的博客</title>
    <link href="http://www.erictxl.cn/2017/04/18/%E4%BD%BF%E7%94%A8github%20+%20hexo%20%E6%90%AD%E5%BB%BA%E5%AE%8C%E5%85%A8%E5%85%8D%E8%B4%B9%E3%80%81%E5%AE%9E%E7%94%A8%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.erictxl.cn/2017/04/18/使用github + hexo 搭建完全免费、实用的博客/</id>
    <published>2017-04-18T12:48:33.000Z</published>
    <updated>2017-06-20T02:50:41.008Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””</p>
</blockquote>
<hr>
<h1 id="我的第一篇博客"><a href="#我的第一篇博客" class="headerlink" title="我的第一篇博客"></a>我的第一篇博客</h1><p>[TOC]</p>
<h2 id="1，搭建环境准备"><a href="#1，搭建环境准备" class="headerlink" title="1，搭建环境准备"></a>1，搭建环境准备</h2><blockquote>
<ul>
<li>Node.js 的安装和准备 </li>
<li>Git的安装和准备 </li>
<li>gitHub账户的配置</li>
</ul>
</blockquote>
<a id="more"></a>
<h3 id="1-1-配置Node-js环境"><a href="#1-1-配置Node-js环境" class="headerlink" title="1.1 配置Node.js环境"></a>1.1 配置Node.js环境</h3><blockquote>
<p>  1.1.1下载Node.js安装文件：去官网选择合适的版本安装 <a href="https://nodejs.org/en/download/" target="_blank" rel="external">Node.js官网</a></p>
</blockquote>
<center><img src="http://wx3.sinaimg.cn/mw690/006xRFa6gy1feqxnr2staj30iu0cz0tb.jpg" alt=""></center>

<center><img src="http://wx2.sinaimg.cn/mw690/006xRFa6gy1fer60tojslj30dv0atwh7.jpg" alt=""></center>

<p>具体安装教程网上都有，提供两个教程链接吧<br><a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="external">菜鸟教程Node.js 安装配置</a><br><a href="http://blog.csdn.net/xxmeng2012/article/details/51492149" target="_blank" rel="external">CSDN博客NodeJS、NPM安装配置步骤(windows版本)</a></p>
<p>具体安装过程这里就不赘述了，安装完成之后，需要检查一下是否安装成功，打开命令行窗口（Win+R，输入cmd回车）在打开的命令行界面中，输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node -v</div><div class="line">npm -v</div></pre></td></tr></table></figure></p>
<p>如果显示下图，则node.js安装完成，我们可以开始下一步了。</p>
<center><img src="http://wx4.sinaimg.cn/mw690/006xRFa6gy1feqxomc9y1j30g408fdft.jpg" alt=""></center>

<h3 id="1-2-Git的安装和准备"><a href="#1-2-Git的安装和准备" class="headerlink" title="1.2 Git的安装和准备"></a>1.2 Git的安装和准备</h3><blockquote>
<p>1.2.1 区官网下载Git安装文件,选择一个合适的版本：<a href="https://git-scm.com/downloads/" target="_blank" rel="external">Git Dowload</a></p>
</blockquote>
<center><img src="http://wx1.sinaimg.cn/mw690/006xRFa6gy1feqxo11pzrj30kd0bygny.jpg" alt=""></center>

<center><img src="http://wx1.sinaimg.cn/mw690/006xRFa6gy1fer6cz5wy6j30e70b1gpo.jpg" alt=""></center>

<p>安装过程同样自己找教程，这里提供一个<a href="http://jingyan.baidu.com/article/020278117cbe921bcc9ce51c.html" target="_blank" rel="external">百度经验图文详解Windows下安装最新版Git</a><br>同样，也需要检查一下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git --version</div></pre></td></tr></table></figure></p>
<blockquote>
<p>1.2.2 github账户的注册和配置</p>
</blockquote>
<p>如果已经拥有账号，请跳过此步~如果没有，请接着看</p>
<blockquote>
<p>1）Github注册<br>打开<a href="https://github.com/，在下图的框中，分别输入自己的用户名，邮箱，密码。" target="_blank" rel="external">https://github.com/，在下图的框中，分别输入自己的用户名，邮箱，密码。</a><br>然后前往自己刚才填写的邮箱，点开Github发送给你的注册确认信，确认注册，结束注册流程。<br>一定要确认注册，否则无法使用gh-pages！<br>2）创建代码库<br>登陆之后，点击页面右上角的加号，选择New repository：</p>
<p><center><img src="http://wx2.sinaimg.cn/mw690/006xRFa6gy1feqxoh24w0j30iw0fgt9f.jpg" alt=""></center><br>新建一个名为yourname.github.io的仓库，比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://test.github.io" target="_blank" rel="external">http://test.github.io</a> 了，是不是很方便？</p>
<blockquote>
<p>几个注意的地方：</p>
<ol>
<li>注册的邮箱一定要验证，否则不会成功！</li>
<li>仓库名字必须是：username.github.io，其中username是你的用户名！</li>
</ol>
</blockquote>
<p>3）代码库设置<br>开启GitHub Pages功能，点击界面右侧的Settings，你将会打开这个库的setting页面，向下拖动，直到看见GitHub Pages，点击Automatic page generator，Github将会自动替你创建出一个gh-pages的页面。</p>
<p><centerr><img src="http://wx4.sinaimg.cn/mw690/006xRFa6gy1feqxojj42rj30jf0abdge.jpg" alt=""><br>然后访问一下 yourname.github.io 这个网址就可以了</centerr></p>
</blockquote>
<p><strong>至此，git的安装和配置已经完成，我们进入下一部分~</strong></p>
<h2 id="2，HeXo的安装和配置"><a href="#2，HeXo的安装和配置" class="headerlink" title="2，HeXo的安装和配置"></a>2，HeXo的安装和配置</h2><h3 id="2-1-hexo安装"><a href="#2-1-hexo安装" class="headerlink" title="2.1 hexo安装"></a>2.1 hexo安装</h3><blockquote>
<p>在自己认为合适的地方创建一个文件夹，这里我以D:\github\HeXo 为例子讲解，创建完成后，在命令行的窗口进入到该目录<br>输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div></pre></td></tr></table></figure></p>
<p>可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用。然后输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo --save</div></pre></td></tr></table></figure></p>
<p>然后你会看到命令行窗口刷了一大堆白字，下面我们来看一看Hexo是不是已经安装好了。 在命令行中输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo -v</div></pre></td></tr></table></figure></p>
<p>如果你看到了如图文字，则说明已经安装成功了。</p>
<center><img src="http://wx4.sinaimg.cn/mw690/006xRFa6gy1feqxomc9y1j30g408fdft.jpg" alt=""></center>

</blockquote>
<h3 id="2-2-hexo的相关配置"><a href="#2-2-hexo的相关配置" class="headerlink" title="2.2 hexo的相关配置"></a>2.2 hexo的相关配置</h3><blockquote>
<p>2.2.1 初始化Hexo</p>
</blockquote>
<p>接着上面的操作，输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure></p>
<p>然后输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure></p>
<p>之后npm将会自动安装你需要的组件，只需要等待npm操作即可。继续操作，同样是在命令行中，输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g</div></pre></td></tr></table></figure></p>
<p>然后输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure></p>
<p>然后会提示：<br>INFO Hexo is running at <a href="http://0.0.0.0:4000/" target="_blank" rel="external">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.<br>在浏览器中打开<a href="http://localhost:4000/，你将会看到：" target="_blank" rel="external">http://localhost:4000/，你将会看到：</a></p>
<center><img src="http://wx1.sinaimg.cn/mw690/006xRFa6gy1fer60vak0vj311y0lctp6.jpg" alt=""></center>

<p>最后，输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>安装一个<code>扩展来支持git命令</code></p>
<p>到目前为止，Hexo在本地的配置已经全都结束了。下面会讲解怎样<code>将Hexo与github page</code> 联系起来</p>
<h2 id="3-将Hexo与github-page-联系起来"><a href="#3-将Hexo与github-page-联系起来" class="headerlink" title="3, 将Hexo与github page 联系起来"></a>3, 将Hexo与github page 联系起来</h2><h3 id="3-1-配置git个人信息"><a href="#3-1-配置git个人信息" class="headerlink" title="3.1 配置git个人信息"></a>3.1 配置git个人信息</h3><p>如果你之前已经配置好git个人信息，请跳过这一个步骤</p>
<blockquote>
<p>3.1.1 设置Git的user name和email：(如果是第一次的话)</p>
</blockquote>
<p>输入注册时的用户名和邮箱<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"yourname"</span></div><div class="line">git config --global user.email <span class="string">"你注册时的邮箱@xx.com"</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>3.1.2 生成密钥</p>
</blockquote>
<p>首先输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/. ssh</div></pre></td></tr></table></figure></p>
<p>检查本机是否已存在的ssh密钥<br>如果提示：No such file or directory 说明你是第一次使用git。输入:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C <span class="string">"你注册时的邮箱@xx.com"</span></div></pre></td></tr></table></figure></p>
<p><code>然后会提示是否需要密码，这个可设可不设，设了麻烦，不设不安全，自己抉择~</code><br>最终会生成一个文件在用户目录下,打开用户目录,比如我的是<code>C:\Users\热血绅士\\.ssh</code>，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：将刚复制的内容粘贴到key那里，title随便填，保存。</p>
<blockquote>
<p>测试是否成功，输入这个指令（就是git@github.com,不用改）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>注意：如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：</p>
<blockquote>
<p>Hi Change-TheWorld! You’ve successfully authenticated, but GitHub does not provide shell access.</p>
</blockquote>
<p>看到这个信息说明SSH已配置成功！</p>
</blockquote>
<h3 id="3-2-配置Deployment"><a href="#3-2-配置Deployment" class="headerlink" title="3.2 配置Deployment"></a>3.2 配置Deployment</h3><p>同样在_config.yml文件中，找到Deployment，然后按照如下修改：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: git@github.com:yourname/yourname.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>这样就可以了,我之前配置的时候就是在这里吃了亏…<br>我 repo 写的是<code>https://github.com/Change-TheWorld/Change-TheWorld.github.io.git</code> 结果博客上传过程中一直报错，下面我会介绍一下错误及解决办法</p>
<h2 id="4，发布"><a href="#4，发布" class="headerlink" title="4，发布"></a>4，发布</h2><p>新建一篇博客，执行下面的命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new post <span class="string">"MyFirstBlog"</span></div></pre></td></tr></table></figure></p>
<p>这时候在我的 电脑的目录下 <code>D:\github\HeXo\source_posts</code> 将会看到 <code>MyFirstBlog.md</code> 文件<br>用MarDown编辑器打开就可以编辑文章了。文章编辑好之后，运行生成.<br><code>部署命令： hexo g  生成静态文件  hexo d 发布</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g </div><div class="line">hexo d</div></pre></td></tr></table></figure></p>
<p>当然你也可以执行下面的命令，相当于上面两条命令的效果，在部署前先生成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g</div></pre></td></tr></table></figure></p>
<p>部署成功后访问 你的地址，<a href="https://yourName.github.io" target="_blank" rel="external">https://yourName.github.io</a>,将可以看到生成的文章。</p>
<h2 id="5，出现的错误及解决办法"><a href="#5，出现的错误及解决办法" class="headerlink" title="5，出现的错误及解决办法"></a>5，出现的错误及解决办法</h2><h3 id="5-1-错误一"><a href="#5-1-错误一" class="headerlink" title="5.1 错误一"></a>5.1 错误一</h3><blockquote>
<p>“ssh: connect to host github.com port 22: Connection timed out”错误</p>
</blockquote>
<p>在连接github时，执行<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-T</span> <span class="selector-tag">Git</span>@<span class="keyword">github</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure></p>
<p> 命令时，出现”ssh: connect to host github.com port 22: Connection timed out”</p>
<blockquote>
<p>解决办法：<br>进入在<code>存放公钥私钥(id_rsa和id_rsa.pub)</code>的文件夹,比如我的就是<code>C:\Users\热血绅士\\.ssh</code>，新建<code>config文件，不需要后缀名</code></p>
<center><img src="http://wx2.sinaimg.cn/mw690/006xRFa6gy1feqxop072bj30k406edfw.jpg" alt=""></center>

</blockquote>
<p>用notepad++ 打开输入以下内容：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Host github.com<span class="built_in"></span></div><div class="line">User YourEmail@xx.com</div><div class="line">Hostname ssh.github.com</div><div class="line">PreferredAuthentications publickey</div><div class="line">IdentityFile ~/.ssh/id_rsa<span class="built_in"></span></div><div class="line">Port 443</div></pre></td></tr></table></figure></p>
<p>user填入你注册时的邮箱，用户名也可以~<br>再次执行<code>ssh -T git@github.com</code>时，会出现提示如下，回车<code>yes</code>即可。</p>
<center><img src="http://wx1.sinaimg.cn/mw690/006xRFa6gy1fer60u78xvj30ht042780.jpg" alt=""></center>

<h3 id="5-2-错误二"><a href="#5-2-错误二" class="headerlink" title="5.2 错误二"></a>5.2 错误二</h3><blockquote>
<p>“failed to connect to github.com port 443: Timed out” </p>
<p>一开始我尝试着设置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global http.proxy socks5://192.168.192.136:8080</div></pre></td></tr></table></figure></p>
</blockquote>
<p>然并卵;改端口，然并卵…..后来我才发现我自己配置Deployment的时候<br>repo写的是<code>https://github.com/Change-TheWorld/Change-TheWorld.github.io.git</code> 问题就出在这个地方,这是为什么呢？</p>
<blockquote>
<p><code>git@github.com:yourname/yourname.github.io.git</code> 与 <code>https://github.com/Change-TheWorld/Change-TheWorld.github.io.git</code>有什么区别吗？</p>
<p>这里我提供一个github官方的文档解释<a href="https://help.github.com/articles/changing-a-remote-s-url/" target="_blank" rel="external">github官方的文档解释</a><br>github默认的是SSH方式，这样更快速，相对的操作也会麻烦一点，按照上面的配置，可以实现两种之间的转换.比如当你clone 一些资源的时候<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure></p>
</blockquote>
<p>要改成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git@github.com:iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure></p>
<h2 id="6，与域名进行绑定"><a href="#6，与域名进行绑定" class="headerlink" title="6，与域名进行绑定"></a>6，与域名进行绑定</h2><h3 id="6-1-首先，要申请一个域名，我的是在腾讯云上申请的，学生认证后免费试用一年的个人域名"><a href="#6-1-首先，要申请一个域名，我的是在腾讯云上申请的，学生认证后免费试用一年的个人域名" class="headerlink" title="6.1 首先，要申请一个域名，我的是在腾讯云上申请的，学生认证后免费试用一年的个人域名"></a>6.1 首先，要申请一个域名，我的是在腾讯云上申请的，学生认证后免费试用一年的个人域名</h3><p>申请到了之后，进行域名的解析<br><img src="http://wx4.sinaimg.cn/mw690/006xRFa6gy1feqxnkks57j30v50axjs8.jpg" alt=""></p>
<p>如图第一行和第二行，就是将我的域名与github上的博客的主页相绑定，配置好之后，到github博客项目根目录新建一个名为CNAME的文件（无后缀），里面填写你的域名，加不加www看你自己喜好，因为经测试：</p>
<blockquote>
<p>● 如果你填写的是没有www的，比如 mygit.me，那么无论是访问 <a href="http://www.mygit.me" target="_blank" rel="external">http://www.mygit.me</a> 还是 <a href="http://mygit.me" target="_blank" rel="external">http://mygit.me</a> ，都会自动跳转到 <a href="http://mygit.me" target="_blank" rel="external">http://mygit.me</a><br>  ● 如果你填写的是带www的，比如 www.mygit.me ，那么无论是访问 <a href="http://www.mygit.me" target="_blank" rel="external">http://www.mygit.me</a> 还是 <a href="http://mygit.me" target="_blank" rel="external">http://mygit.me</a> ，都会自动跳转到 <a href="http://www.mygit.me" target="_blank" rel="external">http://www.mygit.me</a><br>  ● 如果你填写的是其它子域名，比如 abc.mygit.me，那么访问 <a href="http://abc.mygit.me" target="_blank" rel="external">http://abc.mygit.me</a> 没问题，但是访问 <a href="http://mygit.me" target="_blank" rel="external">http://mygit.me</a> ，不会自动跳转到 <a href="http://abc.mygit.me" target="_blank" rel="external">http://abc.mygit.me</a><br>另外说一句，在你绑定了新域名之后，原来的你的用户名.github.io并没有失效，而是会自动跳转到你的新域名。</p>
</blockquote>
<h2 id="7，常用命令集合"><a href="#7，常用命令集合" class="headerlink" title="7，常用命令集合"></a>7，常用命令集合</h2><blockquote>
<p>hexo new “postName” #新建文章<br>hexo new page “pageName” #新建页面<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy #部署到GitHub<br>hexo help  # 查看帮助<br>hexo version  #查看Hexo的版本</p>
</blockquote>
<p>缩写</p>
<blockquote>
<p>hexo n == hexo new<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy</p>
</blockquote>
<p>组合命令：</p>
<blockquote>
<p>hexo s -g #生成并本地预览<br>hexo d -g #生成并上传</p>
</blockquote>
<h2 id="8，发挥你的想象，开始你的博客之旅吧！"><a href="#8，发挥你的想象，开始你的博客之旅吧！" class="headerlink" title="8，发挥你的想象，开始你的博客之旅吧！"></a>8，发挥你的想象，开始你的博客之旅吧！</h2><p><strong><em><font size="5">以上~这就是我的第一篇博客，希望能够帮到大家</font></em></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;断剑重铸之日，骑士归来之时！   — 向着自由，向着未来出发Aco (๑╹◡╹)ﾉ”””&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;我的第一篇博客&quot;&gt;&lt;a href=&quot;#我的第一篇博客&quot; class=&quot;headerlink&quot; title=&quot;我的第一篇博客&quot;&gt;&lt;/a&gt;我的第一篇博客&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;1，搭建环境准备&quot;&gt;&lt;a href=&quot;#1，搭建环境准备&quot; class=&quot;headerlink&quot; title=&quot;1，搭建环境准备&quot;&gt;&lt;/a&gt;1，搭建环境准备&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Node.js 的安装和准备 &lt;/li&gt;
&lt;li&gt;Git的安装和准备 &lt;/li&gt;
&lt;li&gt;gitHub账户的配置&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="experience" scheme="http://www.erictxl.cn/categories/experience/"/>
    
    
      <category term="新手经历" scheme="http://www.erictxl.cn/tags/%E6%96%B0%E6%89%8B%E7%BB%8F%E5%8E%86/"/>
    
      <category term="博客搭建" scheme="http://www.erictxl.cn/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="HeXo" scheme="http://www.erictxl.cn/tags/HeXo/"/>
    
  </entry>
  
</feed>
